Subject: [PATCH] balance discount feature and event handling
---
Index: src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20210813072513_InitialMigration.cs
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20210813072513_InitialMigration.cs b/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20210813072513_InitialMigration.cs
deleted file mode 100644
--- a/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20210813072513_InitialMigration.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ /dev/null	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
@@ -1,75 +0,0 @@
-using System;
-using Microsoft.EntityFrameworkCore.Migrations;
-
-namespace Identity.API.Migrations.PersistedGrantDb
-{
-    public partial class InitialMigration : Migration
-    {
-        protected override void Up(MigrationBuilder migrationBuilder)
-        {
-            migrationBuilder.CreateTable(
-                name: "DeviceCodes",
-                columns: table => new
-                {
-                    UserCode = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    DeviceCode = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    SubjectId = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
-                    ClientId = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
-                    Expiration = table.Column<DateTime>(type: "datetime2", nullable: false),
-                    Data = table.Column<string>(type: "nvarchar(max)", maxLength: 50000, nullable: false)
-                },
-                constraints: table =>
-                {
-                    table.PrimaryKey("PK_DeviceCodes", x => x.UserCode);
-                });
-
-            migrationBuilder.CreateTable(
-                name: "PersistedGrants",
-                columns: table => new
-                {
-                    Key = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    Type = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
-                    SubjectId = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
-                    ClientId = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
-                    Expiration = table.Column<DateTime>(type: "datetime2", nullable: true),
-                    Data = table.Column<string>(type: "nvarchar(max)", maxLength: 50000, nullable: false)
-                },
-                constraints: table =>
-                {
-                    table.PrimaryKey("PK_PersistedGrants", x => x.Key);
-                });
-
-            migrationBuilder.CreateIndex(
-                name: "IX_DeviceCodes_DeviceCode",
-                table: "DeviceCodes",
-                column: "DeviceCode",
-                unique: true);
-
-            migrationBuilder.CreateIndex(
-                name: "IX_DeviceCodes_Expiration",
-                table: "DeviceCodes",
-                column: "Expiration");
-
-            migrationBuilder.CreateIndex(
-                name: "IX_PersistedGrants_Expiration",
-                table: "PersistedGrants",
-                column: "Expiration");
-
-            migrationBuilder.CreateIndex(
-                name: "IX_PersistedGrants_SubjectId_ClientId_Type",
-                table: "PersistedGrants",
-                columns: new[] { "SubjectId", "ClientId", "Type" });
-        }
-
-        protected override void Down(MigrationBuilder migrationBuilder)
-        {
-            migrationBuilder.DropTable(
-                name: "DeviceCodes");
-
-            migrationBuilder.DropTable(
-                name: "PersistedGrants");
-        }
-    }
-}
Index: src/Services/Catalog/Catalog.API/Infrastructure/IntegrationEventMigrations/20170322145434_IntegrationEventInitial.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Catalog/Catalog.API/Infrastructure/IntegrationEventMigrations/20170322145434_IntegrationEventInitial.cs b/src/Services/Catalog/Catalog.API/Infrastructure/IntegrationEventMigrations/20170322145434_IntegrationEventInitial.cs
--- a/src/Services/Catalog/Catalog.API/Infrastructure/IntegrationEventMigrations/20170322145434_IntegrationEventInitial.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Catalog/Catalog.API/Infrastructure/IntegrationEventMigrations/20170322145434_IntegrationEventInitial.cs	(date 1673369341294)
@@ -1,5 +1,6 @@
-using Microsoft.EntityFrameworkCore.Migrations;
 using System;
+using System.Collections.Generic;
+using Microsoft.EntityFrameworkCore.Migrations;
 
 namespace Catalog.API.Migrations
 {
Index: src/Services/Coupon/Coupon.API/Controllers/PointController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Controllers/PointController.cs b/src/Services/Coupon/Coupon.API/Controllers/PointController.cs
new file mode 100644
--- /dev/null	(date 1673030401023)
+++ b/src/Services/Coupon/Coupon.API/Controllers/PointController.cs	(date 1673030401023)
@@ -0,0 +1,137 @@
+using System.Net;
+using Coupon.API.Dtos;
+using Coupon.API.Enums;
+using Coupon.API.Infrastructure.Models;
+using Coupon.API.Infrastructure.Repositories;
+using Coupon.API.Infrastructure.Repositories.Point;
+using Microsoft.AspNetCore.Authorization;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.Extensions.Logging;
+
+namespace Coupon.API.Controllers;
+
+[Authorize]
+[ApiController]
+[Route("api/v1/[controller]")]
+public class PointController : ControllerBase
+{
+    private readonly ILogger<PointController> _logger;
+    private readonly IPointRepository _pointRepository;
+    private readonly IMapper<PointDto, Point> _mapper;
+    private readonly ExceptionTrigger _exceptionTrigger;
+
+    public PointController(ILogger<PointController> logger,
+        IPointRepository pointRepository,
+        IMapper<PointDto, Point> mapper,
+        ExceptionTrigger exceptionTrigger)
+    {
+        _logger = logger;
+        _pointRepository = pointRepository;
+        _mapper = mapper;
+        _exceptionTrigger = exceptionTrigger;
+    }
+
+    [HttpGet("{userId}")]
+    [ProducesResponseType((int)HttpStatusCode.NotFound)]
+    [ProducesResponseType((int)HttpStatusCode.BadRequest)]
+    [ProducesResponseType(typeof(PointDto), (int)HttpStatusCode.OK)]
+    public async Task<ActionResult<PointDto>> GetPointsByUserIdAsync(string userId)
+    {
+        _logger.LogInformation("----- Get user {UserId}", userId);
+
+        var result = _exceptionTrigger.Process(userId);
+
+        if (result.shouldFire)
+        {
+            throw new Exception($"Exception code received: {userId}");
+        }
+
+        if (result.configured)
+        {
+            return NotFound($"CONFIG: {result.message}");
+        }
+
+        var point = await _pointRepository.GetPointsByUserId(userId);
+
+        if (point is null)
+        {
+            return NotFound("ERROR: The user not found");
+        }
+
+        var pointDto = _mapper.Translate(point);
+        Console.WriteLine(pointDto.NumberOfPoints);
+        Console.WriteLine(pointDto.Cash);
+        return Ok(pointDto);
+    }
+    
+    [HttpPost("{userId}")]
+    [ProducesResponseType((int)HttpStatusCode.NotFound)]
+    [ProducesResponseType((int)HttpStatusCode.BadRequest)]
+    [ProducesResponseType(typeof(PointDto), (int)HttpStatusCode.OK)]
+    public async Task<ActionResult<PointDto>> PostPointsByUserIdAsync(string userId)
+    {
+        _logger.LogInformation("----- Get user {UserId}", userId);
+
+        var result = _exceptionTrigger.Process(userId);
+
+        if (result.shouldFire)
+        {
+            throw new Exception($"Exception code received: {userId}");
+        }
+
+        if (result.configured)
+        {
+            return NotFound($"CONFIG: {result.message}");
+        }
+
+        var point = await _pointRepository.CreatePointsBalanceByUserId(userId);
+
+        var pointDto = _mapper.Translate(point);
+
+        return Ok(pointDto);
+    }
+    
+    [HttpPut("{userId}")]
+    [ProducesResponseType((int)HttpStatusCode.NotFound)]
+    [ProducesResponseType((int)HttpStatusCode.BadRequest)]
+    [ProducesResponseType(typeof(PointDto), (int)HttpStatusCode.OK)]
+    public async Task<ActionResult<PointDto>> UpdatePointsByUserIdAsync(string userId, [FromQuery] int points, [FromQuery] Operation operation)
+    {
+        _logger.LogInformation("----- Get user {UserId}", userId);
+
+        var result = _exceptionTrigger.Process(userId);
+
+        if (result.shouldFire)
+        {
+            throw new Exception($"Exception code received: {userId}");
+        }
+
+        if (result.configured)
+        {
+            return NotFound($"CONFIG: {result.message}");
+        }
+
+        if (points == default)
+        {
+            throw new Exception($"The points can't be 0: {userId}");
+        }
+        var balance = await _pointRepository.GetPointsByUserId(userId);
+        if (balance is null)
+        {
+            return NotFound($"Balance of user: {userId} wasn't find");
+        }
+        if (operation == Operation.Adding)
+        {
+            await _pointRepository.AddPointsToBalanceByUser(balance.Id, userId, points);
+        }
+        else
+        {
+            await _pointRepository.SubtractPointsFromBalanceByUser(balance.Id, userId, points);
+        }
+        
+
+        // var pointDto = _mapper.Translate(point);
+
+        return Ok();
+    }
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/PointRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/PointRepository.cs b/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/PointRepository.cs
new file mode 100644
--- /dev/null	(date 1673049098576)
+++ b/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/PointRepository.cs	(date 1673049098576)
@@ -0,0 +1,65 @@
+using MongoDB.Driver;
+
+namespace Coupon.API.Infrastructure.Repositories.Point;
+
+public sealed class PointRepository : IPointRepository
+{
+    private readonly PointContext _pointContext;
+    public PointRepository(PointContext context)
+    {
+        _pointContext = context;
+    }
+
+    public async Task<Models.Point> GetPointsByUserId(string userId)
+    {
+        var filter = Builders<Models.Point>.Filter.Eq("UserId", userId);
+        return await _pointContext.Points.Find(filter).FirstOrDefaultAsync();
+    }
+
+    public async Task<Models.Point> CreatePointsBalanceByUserId(string userId)
+    {
+        var filter = Builders<Models.Point>.Filter.Eq("UserId", userId);
+        var point = await _pointContext.Points.Find(filter).FirstOrDefaultAsync();
+        if (point is null)
+        {
+            var update = Builders<Models.Point>.Update
+                .Set(point => point.NumberOfPoints, default)
+                .Set(point => point.UserId, userId);
+            await _pointContext.Points.UpdateOneAsync(filter, update, new UpdateOptions { IsUpsert = false });
+        }
+
+        return point;
+    }
+    
+    // public async Task UpdatePointsAfterOrderingByUser(string userId, double balance)
+    // {
+    //     balance = Math.Round(balance, MidpointRounding.ToZero);
+    //     var filter = Builders<Models.Point>.Filter.Eq("UserId", userId);
+    //     var point = await _pointContext.Points.Find(filter).FirstOrDefaultAsync();
+    //     var update = Builders<Models.Point>.Update
+    //         .Set(point => point.NumberOfPoints, point.NumberOfPoints + balance)
+    //         .Set(point => point.UserId, userId);
+    //
+    //     await _pointContext.Points.UpdateOneAsync(filter, update, new UpdateOptions { IsUpsert = false });
+    // }
+
+    public async Task AddPointsToBalanceByUser(string id, string userId, int balance)
+    {
+        var filter = Builders<Models.Point>.Filter.Eq("Id", id);
+        var point = await _pointContext.Points.Find(filter).FirstOrDefaultAsync();
+        var update = Builders<Models.Point>.Update
+            .Set(point => point.NumberOfPoints, point.NumberOfPoints + balance)
+            .Set(point => point.UserId, point.UserId);
+        await _pointContext.Points.UpdateOneAsync(filter, update, new UpdateOptions { IsUpsert = false });
+    }
+    
+    public async Task SubtractPointsFromBalanceByUser(string id, string userId, int points)
+    {
+        var filter = Builders<Models.Point>.Filter.Eq("Id", id);
+        var point = await _pointContext.Points.Find(filter).FirstOrDefaultAsync();
+        var update = Builders<Models.Point>.Update
+            .Set(point => point.NumberOfPoints, point.NumberOfPoints - points)
+            .Set(point => point.UserId, point.UserId);
+        await _pointContext.Points.UpdateOneAsync(filter, update, new UpdateOptions { IsUpsert = false });
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderBalanceConfirmedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderBalanceConfirmedIntegrationEvent.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderBalanceConfirmedIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673087415987)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderBalanceConfirmedIntegrationEvent.cs	(date 1673087415987)
@@ -0,0 +1,12 @@
+using Newtonsoft.Json;
+
+namespace Ordering.API.Application.IntegrationEvents.Events;
+
+public record OrderBalanceConfirmedIntegrationEvent : IntegrationEvent
+{
+    [JsonProperty]
+    public int OrderId { get; private set; }
+
+    [JsonProperty]
+    public int Discount { get; private set; }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderCouponConfirmedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderCouponConfirmedIntegrationEvent.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderCouponConfirmedIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673087416013)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderCouponConfirmedIntegrationEvent.cs	(date 1673087416013)
@@ -0,0 +1,14 @@
+namespace Ordering.API.Application.IntegrationEvents.Events
+{
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+    using Newtonsoft.Json;
+
+    public record OrderCouponConfirmedIntegrationEvent : IntegrationEvent
+    {
+        [JsonProperty]
+        public int OrderId { get; private set; }
+
+        [JsonProperty]
+        public int Discount { get; private set; }
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderCouponRejectedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderCouponRejectedIntegrationEvent.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderCouponRejectedIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673087415973)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderCouponRejectedIntegrationEvent.cs	(date 1673087415973)
@@ -0,0 +1,14 @@
+namespace Ordering.API.Application.IntegrationEvents.Events
+{
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+    using Newtonsoft.Json;
+
+    public record OrderCouponRejectedIntegrationEvent : IntegrationEvent
+    {
+        [JsonProperty]
+        public int OrderId { get; private set; }
+
+        [JsonProperty]
+        public string Code { get; private set; }
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Infrastructure/IntegrationEventMigrations/20170330131634_IntegrationEventInitial.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/IntegrationEventMigrations/20170330131634_IntegrationEventInitial.cs b/src/Services/Ordering/Ordering.API/Infrastructure/IntegrationEventMigrations/20170330131634_IntegrationEventInitial.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/IntegrationEventMigrations/20170330131634_IntegrationEventInitial.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/IntegrationEventMigrations/20170330131634_IntegrationEventInitial.cs	(date 1673369418459)
@@ -1,5 +1,6 @@
-using Microsoft.EntityFrameworkCore.Migrations;
 using System;
+using System.Collections.Generic;
+using Microsoft.EntityFrameworkCore.Migrations;
 
 namespace Ordering.API.Infrastructure.IntegrationEventMigrations
 {
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderBalanceRejectedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderBalanceRejectedIntegrationEvent.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderBalanceRejectedIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673087416001)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderBalanceRejectedIntegrationEvent.cs	(date 1673087416001)
@@ -0,0 +1,12 @@
+using Newtonsoft.Json;
+
+namespace Ordering.API.Application.IntegrationEvents.Events;
+
+public record OrderBalanceRejectedIntegrationEvent : IntegrationEvent
+{
+    [JsonProperty]
+    public int OrderId { get; private set; }
+
+    [JsonProperty]
+    public string Code { get; private set; }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Startup.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Startup.cs b/src/Services/Ordering/Ordering.API/Startup.cs
--- a/src/Services/Ordering/Ordering.API/Startup.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Startup.cs	(date 1673087416024)
@@ -1,3 +1,5 @@
+using Ordering.API.Application.IntegrationEvents.Events;
+
 namespace Microsoft.eShopOnContainers.Services.Ordering.API;
 
 public class Startup
@@ -106,6 +108,14 @@
         eventBus.Subscribe<OrderStockRejectedIntegrationEvent, IIntegrationEventHandler<OrderStockRejectedIntegrationEvent>>();
         eventBus.Subscribe<OrderPaymentFailedIntegrationEvent, IIntegrationEventHandler<OrderPaymentFailedIntegrationEvent>>();
         eventBus.Subscribe<OrderPaymentSucceededIntegrationEvent, IIntegrationEventHandler<OrderPaymentSucceededIntegrationEvent>>();
+        
+        //coupon
+        eventBus.Subscribe<OrderCouponRejectedIntegrationEvent, IIntegrationEventHandler<OrderCouponRejectedIntegrationEvent>>();
+        eventBus.Subscribe<OrderCouponConfirmedIntegrationEvent, IIntegrationEventHandler<OrderCouponConfirmedIntegrationEvent>>();
+        
+        //points
+        eventBus.Subscribe<OrderBalanceRejectedIntegrationEvent, IIntegrationEventHandler<OrderBalanceRejectedIntegrationEvent>>();
+        eventBus.Subscribe<OrderBalanceConfirmedIntegrationEvent, IIntegrationEventHandler<OrderBalanceConfirmedIntegrationEvent>>();
     }
 
     protected virtual void ConfigureAuth(IApplicationBuilder app)
Index: src/Services/Ordering/Ordering.SignalrHub/Startup.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.SignalrHub/Startup.cs b/src/Services/Ordering/Ordering.SignalrHub/Startup.cs
--- a/src/Services/Ordering/Ordering.SignalrHub/Startup.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.SignalrHub/Startup.cs	(date 1673013281248)
@@ -1,3 +1,7 @@
+using Ordering.SignalrHub.IntegrationEvents;
+using Ordering.SignalrHub.IntegrationEvents.EventHandling;
+using Ordering.SignalrHub.IntegrationEvents.Events;
+
 namespace Microsoft.eShopOnContainers.Services.Ordering.SignalrHub;
 
 public class Startup
@@ -137,6 +141,9 @@
         var eventBus = app.ApplicationServices.GetRequiredService<IEventBus>();
 
         eventBus.Subscribe<OrderStatusChangedToAwaitingValidationIntegrationEvent, OrderStatusChangedToAwaitingValidationIntegrationEventHandler>();
+        eventBus.Subscribe<OrderStatusChangedToAwaitingCouponValidationIntegrationEvent, OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler>();
+        eventBus.Subscribe<OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent, OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler>();
+        eventBus.Subscribe<OrderStatusChangedToValidatedIntegrationEvent, OrderStatusChangedToValidatedIntegrationEventHandler>();
         eventBus.Subscribe<OrderStatusChangedToPaidIntegrationEvent, OrderStatusChangedToPaidIntegrationEventHandler>();
         eventBus.Subscribe<OrderStatusChangedToStockConfirmedIntegrationEvent, OrderStatusChangedToStockConfirmedIntegrationEventHandler>();
         eventBus.Subscribe<OrderStatusChangedToShippedIntegrationEvent, OrderStatusChangedToShippedIntegrationEventHandler>();
Index: src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/Order.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/Order.cs b/src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/Order.cs
--- a/src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/Order.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/Order.cs	(date 1673049773555)
@@ -1,4 +1,5 @@
 using Microsoft.eShopOnContainers.Services.Ordering.Domain.Events;
+using Ordering.Domain.Events;
 
 namespace Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate;
 
@@ -18,10 +19,16 @@
 
     public OrderStatus OrderStatus { get; private set; }
     private int _orderStatusId;
+    
+    public bool? DiscountConfirmed { get; private set; }
 
     private string _description;
 
+    public string DiscountCode { get; private set; }
 
+    public decimal? Discount { get; private set; }
+
+    public int Balance { get; set; }
 
     // Draft orders have this set to true. Currently we don't check anywhere the draft status of an Order, but we could do it if needed
     private bool _isDraft;
@@ -49,13 +56,16 @@
     }
 
     public Order(string userId, string userName, Address address, int cardTypeId, string cardNumber, string cardSecurityNumber,
-            string cardHolderName, DateTime cardExpiration, int? buyerId = null, int? paymentMethodId = null) : this()
+            string cardHolderName, DateTime cardExpiration, string discountCode, decimal? discount, int balance, int? buyerId = null, int? paymentMethodId = null) : this()
     {
         _buyerId = buyerId;
         _paymentMethodId = paymentMethodId;
         _orderStatusId = OrderStatus.Submitted.Id;
         _orderDate = DateTime.UtcNow;
         Address = address;
+        DiscountCode = discountCode;
+        Discount = discountCode == null ? null : discount;
+        Balance = balance;
 
         // Add the OrderStarterDomainEvent to the domain events collection 
         // to be raised/dispatched when comitting changes into the Database [ After DbContext.SaveChanges() ]
@@ -121,6 +131,66 @@
             _description = "All the items were confirmed with available stock.";
         }
     }
+    
+    public void ProcessStockConfirmed()
+    {
+        // If there's no Couponm, then it's validated
+        if (DiscountCode == null)
+        {
+            if (_orderStatusId != OrderStatus.AwaitingStockValidation.Id)
+            {
+                StatusChangeException(OrderStatus.Validated);
+            }
+
+            _orderStatusId = OrderStatus.Validated.Id;
+            _description = "All the items were confirmed with available stock.";
+
+            AddDomainEvent(new OrderStatusChangedToValidatedDomainEvent(Id));
+        }
+        else
+        {
+            if (_orderStatusId != OrderStatus.AwaitingStockValidation.Id)
+            {
+                StatusChangeException(OrderStatus.AwaitingCouponValidation);
+            }
+
+            _orderStatusId = OrderStatus.AwaitingCouponValidation.Id;
+            _description = "Validate discount code";
+
+            AddDomainEvent(new OrderStatusChangedToAwaitingCouponValidationDomainEvent(Id, DiscountCode));
+            AddDomainEvent(new OrderStatusChangedToAwaitingBalanceUpdateDomainEvent(Id, Balance));
+        }
+    }
+
+    public void ProcessCouponConfirmed()
+    {
+        if (_orderStatusId != OrderStatus.AwaitingCouponValidation.Id)
+        {
+            StatusChangeException(OrderStatus.Validated);
+        }
+
+        DiscountConfirmed = true;
+
+        _orderStatusId = OrderStatus.Validated.Id;
+        _description = "Discount coupon validated.";
+
+        AddDomainEvent(new OrderStatusChangedToValidatedDomainEvent(Id));
+    }
+    
+    public void ProcessBalanceConfirmed()
+    {
+        if (_orderStatusId != OrderStatus.AwaitingBalanceValidation.Id)
+        {
+            StatusChangeException(OrderStatus.Validated);
+        }
+
+        DiscountConfirmed = true;
+
+        _orderStatusId = OrderStatus.Validated.Id;
+        _description = "Discount balance validated.";
+
+        AddDomainEvent(new OrderStatusChangedToValidatedDomainEvent(Id));
+    }
 
     public void SetPaidStatus()
     {
Index: src/Services/Coupon/Coupon.API/Extensions/IServiceCollectionExtensions.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Extensions/IServiceCollectionExtensions.cs b/src/Services/Coupon/Coupon.API/Extensions/IServiceCollectionExtensions.cs
--- a/src/Services/Coupon/Coupon.API/Extensions/IServiceCollectionExtensions.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/Extensions/IServiceCollectionExtensions.cs	(date 1673088537985)
@@ -2,6 +2,7 @@
 using Coupon.API.Dtos;
 using Coupon.API.Filters;
 using Coupon.API.Infrastructure.Repositories;
+using Coupon.API.Infrastructure.Repositories.Point;
 using Microsoft.AspNetCore.Authentication.JwtBearer;
 using Microsoft.AspNetCore.Http;
 using Microsoft.AspNetCore.Mvc;
@@ -23,6 +24,7 @@
         public static IServiceCollection AddCouponRegister(this IServiceCollection services, IConfiguration configuration)
         {
             services.AddTransient<ICouponRepository, CouponRepository>()
+                .AddTransient<IPointRepository, PointRepository>()
                 .AddTransient<IServiceBusPersisterConnection, DefaultServiceBusPersisterConnection>(service => new DefaultServiceBusPersisterConnection(configuration["EventBusConnection"]))
                 .AddTransient<IRabbitMQPersistentConnection, DefaultRabbitMQPersistentConnection>(service =>
                 {
@@ -43,7 +45,9 @@
                 })
                 .AddTransient<IEventBusSubscriptionsManager, InMemoryEventBusSubscriptionsManager>()
                 .AddTransient<CouponContext>()
-                .AddTransient<IMapper<CouponDto, Infrastructure.Models.Coupon>, Mapper>();
+                .AddTransient<PointContext>()
+                .AddTransient<IMapper<CouponDto, Infrastructure.Models.Coupon>, Mapper>()
+                .AddTransient<IMapper<PointDto, Infrastructure.Models.Point>, PointMapper>();
 
             return services;
         }
@@ -85,6 +89,7 @@
         public static IServiceCollection AddCustomSettings(this IServiceCollection services, IConfiguration configuration)
         {
             services.Configure<CouponSettings>(configuration);
+            services.Configure<PointSettings>(configuration);
             services.Configure<ApiBehaviorOptions>(options =>
             {
                 options.InvalidModelStateResponseFactory = context =>
@@ -151,7 +156,7 @@
             var accountKey = configuration.GetValue<string>("AzureStorageAccountKey");
 
             var hcBuilder = services.AddHealthChecks();
-
+            //to do add hc for points
             hcBuilder.AddCheck("self", () => HealthCheckResult.Healthy())
                 .AddMongoDb(
                     configuration["ConnectionString"],
Index: src/ApiGateways/Web.Bff.Shopping/aggregator/Services/ICouponService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ApiGateways/Web.Bff.Shopping/aggregator/Services/ICouponService.cs b/src/ApiGateways/Web.Bff.Shopping/aggregator/Services/ICouponService.cs
new file mode 100644
--- /dev/null	(date 1673088936081)
+++ b/src/ApiGateways/Web.Bff.Shopping/aggregator/Services/ICouponService.cs	(date 1673088936081)
@@ -0,0 +1,10 @@
+using System.Net.Http;
+using System.Threading.Tasks;
+
+namespace Microsoft.eShopOnContainers.Web.Shopping.HttpAggregator.Services
+{
+    public interface ICouponService
+    {
+        Task<HttpResponseMessage> CheckCouponByCodeNumberAsync(string codeNumber);
+    }
+}
Index: src/ApiGateways/Web.Bff.Shopping/aggregator/Services/CouponService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ApiGateways/Web.Bff.Shopping/aggregator/Services/CouponService.cs b/src/ApiGateways/Web.Bff.Shopping/aggregator/Services/CouponService.cs
new file mode 100644
--- /dev/null	(date 1673088936088)
+++ b/src/ApiGateways/Web.Bff.Shopping/aggregator/Services/CouponService.cs	(date 1673088936088)
@@ -0,0 +1,36 @@
+using System;
+using System.Net.Http;
+using System.Threading.Tasks;
+using Microsoft.eShopOnContainers.Web.Shopping.HttpAggregator.Config;
+using Microsoft.Extensions.Logging;
+using Microsoft.Extensions.Options;
+
+namespace Microsoft.eShopOnContainers.Web.Shopping.HttpAggregator.Services
+{
+    public class CouponService : ICouponService
+    {
+        public readonly HttpClient _httpClient;
+        private readonly UrlsConfig _urls;
+        private readonly ILogger<CouponService> _logger;
+
+        public CouponService(HttpClient httpClient, IOptions<UrlsConfig> config, ILogger<CouponService> logger)
+        {
+            _urls = config.Value;
+            _httpClient = httpClient;
+            _logger = logger;
+        }
+
+        public async Task<HttpResponseMessage> CheckCouponByCodeNumberAsync(string codeNumber)
+        {
+            _logger.LogInformation("----- WebAggregator --> Coupon-API: {codeNumber}", codeNumber);
+
+            var url = new Uri($"{_urls.Coupon}/api/v1/coupon/{codeNumber.Trim().ToUpper()}");
+
+            var response = await _httpClient.GetAsync(url);
+
+            _logger.LogInformation("----- WebAggregator <-- Coupon-API: {@response}", response);
+
+            return response;
+        }
+    }
+}
Index: src/ApiGateways/Web.Bff.Shopping/aggregator/Config/UrlsConfig.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ApiGateways/Web.Bff.Shopping/aggregator/Config/UrlsConfig.cs b/src/ApiGateways/Web.Bff.Shopping/aggregator/Config/UrlsConfig.cs
--- a/src/ApiGateways/Web.Bff.Shopping/aggregator/Config/UrlsConfig.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/ApiGateways/Web.Bff.Shopping/aggregator/Config/UrlsConfig.cs	(date 1673089009025)
@@ -37,5 +37,7 @@
     public string GrpcCatalog { get; set; }
 
     public string GrpcOrdering { get; set; }
+    
+    public string Coupon { get; set; }
 }
 
Index: src/Services/Identity/Identity.API/Migrations/ConfigurationDb/ConfigurationDbContextModelSnapshot.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/ConfigurationDbContextModelSnapshot.cs b/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/ConfigurationDbContextModelSnapshot.cs
--- a/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/ConfigurationDbContextModelSnapshot.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/ConfigurationDbContextModelSnapshot.cs	(date 1673369528809)
@@ -15,133 +15,109 @@
         {
 #pragma warning disable 612, 618
             modelBuilder
+                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                 .HasAnnotation("Relational:MaxIdentifierLength", 128)
-                .HasAnnotation("ProductVersion", "6.0.0")
                 .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
                     b.Property<string>("DisplayName")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("Enabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Enabled");
 
-                    b.Property<DateTime?>("LastAccessed")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("LastAccessed");
 
                     b.Property<string>("Name")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("NonEditable")
-                        .HasColumnType("bit");
+                    b.Property<bool>("NonEditable");
 
-                    b.Property<DateTime?>("Updated")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Updated");
 
                     b.HasKey("Id");
 
                     b.HasIndex("Name")
                         .IsUnique();
 
-                    b.ToTable("ApiResources", (string)null);
+                    b.ToTable("ApiResources");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiResourceId");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ApiResourceId");
 
-                    b.ToTable("ApiClaims", (string)null);
+                    b.ToTable("ApiClaims");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiResourceId");
 
                     b.Property<string>("Key")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ApiResourceId");
 
-                    b.ToTable("ApiProperties", (string)null);
+                    b.ToTable("ApiProperties");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiResourceId");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
                     b.Property<string>("DisplayName")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("Emphasize")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Emphasize");
 
                     b.Property<string>("Name")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("Required")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Required");
 
-                    b.Property<bool>("ShowInDiscoveryDocument")
-                        .HasColumnType("bit");
+                    b.Property<bool>("ShowInDiscoveryDocument");
 
                     b.HasKey("Id");
 
@@ -150,538 +126,435 @@
                     b.HasIndex("Name")
                         .IsUnique();
 
-                    b.ToTable("ApiScopes", (string)null);
+                    b.ToTable("ApiScopes");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiScopeId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiScopeId");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ApiScopeId");
 
-                    b.ToTable("ApiScopeClaims", (string)null);
+                    b.ToTable("ApiScopeClaims");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiResourceId");
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
-                    b.Property<DateTime?>("Expiration")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Expiration");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(4000)
-                        .HasColumnType("nvarchar(4000)");
+                        .HasMaxLength(4000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ApiResourceId");
 
-                    b.ToTable("ApiSecrets", (string)null);
+                    b.ToTable("ApiSecrets");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("AbsoluteRefreshTokenLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("AbsoluteRefreshTokenLifetime");
 
-                    b.Property<int>("AccessTokenLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("AccessTokenLifetime");
 
-                    b.Property<int>("AccessTokenType")
-                        .HasColumnType("int");
+                    b.Property<int>("AccessTokenType");
 
-                    b.Property<bool>("AllowAccessTokensViaBrowser")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AllowAccessTokensViaBrowser");
 
-                    b.Property<bool>("AllowOfflineAccess")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AllowOfflineAccess");
 
-                    b.Property<bool>("AllowPlainTextPkce")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AllowPlainTextPkce");
 
-                    b.Property<bool>("AllowRememberConsent")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AllowRememberConsent");
 
-                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken");
 
-                    b.Property<bool>("AlwaysSendClientClaims")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AlwaysSendClientClaims");
 
-                    b.Property<int>("AuthorizationCodeLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("AuthorizationCodeLifetime");
 
-                    b.Property<bool>("BackChannelLogoutSessionRequired")
-                        .HasColumnType("bit");
+                    b.Property<bool>("BackChannelLogoutSessionRequired");
 
                     b.Property<string>("BackChannelLogoutUri")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.Property<string>("ClientClaimsPrefix")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientId")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientName")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientUri")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
-                    b.Property<int?>("ConsentLifetime")
-                        .HasColumnType("int");
+                    b.Property<int?>("ConsentLifetime");
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
-                    b.Property<int>("DeviceCodeLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("DeviceCodeLifetime");
 
-                    b.Property<bool>("EnableLocalLogin")
-                        .HasColumnType("bit");
+                    b.Property<bool>("EnableLocalLogin");
 
-                    b.Property<bool>("Enabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Enabled");
 
-                    b.Property<bool>("FrontChannelLogoutSessionRequired")
-                        .HasColumnType("bit");
+                    b.Property<bool>("FrontChannelLogoutSessionRequired");
 
                     b.Property<string>("FrontChannelLogoutUri")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
-                    b.Property<int>("IdentityTokenLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("IdentityTokenLifetime");
 
-                    b.Property<bool>("IncludeJwtId")
-                        .HasColumnType("bit");
+                    b.Property<bool>("IncludeJwtId");
 
-                    b.Property<DateTime?>("LastAccessed")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("LastAccessed");
 
                     b.Property<string>("LogoUri")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
-                    b.Property<bool>("NonEditable")
-                        .HasColumnType("bit");
+                    b.Property<bool>("NonEditable");
 
                     b.Property<string>("PairWiseSubjectSalt")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ProtocolType")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<int>("RefreshTokenExpiration")
-                        .HasColumnType("int");
+                    b.Property<int>("RefreshTokenExpiration");
 
-                    b.Property<int>("RefreshTokenUsage")
-                        .HasColumnType("int");
+                    b.Property<int>("RefreshTokenUsage");
 
-                    b.Property<bool>("RequireClientSecret")
-                        .HasColumnType("bit");
+                    b.Property<bool>("RequireClientSecret");
 
-                    b.Property<bool>("RequireConsent")
-                        .HasColumnType("bit");
+                    b.Property<bool>("RequireConsent");
 
-                    b.Property<bool>("RequirePkce")
-                        .HasColumnType("bit");
+                    b.Property<bool>("RequirePkce");
 
-                    b.Property<int>("SlidingRefreshTokenLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("SlidingRefreshTokenLifetime");
 
-                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
-                        .HasColumnType("bit");
+                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh");
 
-                    b.Property<DateTime?>("Updated")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Updated");
 
                     b.Property<string>("UserCodeType")
-                        .HasMaxLength(100)
-                        .HasColumnType("nvarchar(100)");
+                        .HasMaxLength(100);
 
-                    b.Property<int?>("UserSsoLifetime")
-                        .HasColumnType("int");
+                    b.Property<int?>("UserSsoLifetime");
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId")
                         .IsUnique();
 
-                    b.ToTable("Clients", (string)null);
+                    b.ToTable("Clients");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientClaims", (string)null);
+                    b.ToTable("ClientClaims");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Origin")
                         .IsRequired()
-                        .HasMaxLength(150)
-                        .HasColumnType("nvarchar(150)");
+                        .HasMaxLength(150);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientCorsOrigins", (string)null);
+                    b.ToTable("ClientCorsOrigins");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("GrantType")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientGrantTypes", (string)null);
+                    b.ToTable("ClientGrantTypes");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Provider")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientIdPRestrictions", (string)null);
+                    b.ToTable("ClientIdPRestrictions");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("PostLogoutRedirectUri")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientPostLogoutRedirectUris", (string)null);
+                    b.ToTable("ClientPostLogoutRedirectUris");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Key")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientProperties", (string)null);
+                    b.ToTable("ClientProperties");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("RedirectUri")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientRedirectUris", (string)null);
+                    b.ToTable("ClientRedirectUris");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Scope")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientScopes", (string)null);
+                    b.ToTable("ClientScopes");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
-                    b.Property<DateTime?>("Expiration")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Expiration");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(4000)
-                        .HasColumnType("nvarchar(4000)");
+                        .HasMaxLength(4000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientSecrets", (string)null);
+                    b.ToTable("ClientSecrets");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("IdentityResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("IdentityResourceId");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("IdentityResourceId");
 
-                    b.ToTable("IdentityClaims", (string)null);
+                    b.ToTable("IdentityClaims");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
                     b.Property<string>("DisplayName")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("Emphasize")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Emphasize");
 
-                    b.Property<bool>("Enabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Enabled");
 
                     b.Property<string>("Name")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("NonEditable")
-                        .HasColumnType("bit");
+                    b.Property<bool>("NonEditable");
 
-                    b.Property<bool>("Required")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Required");
 
-                    b.Property<bool>("ShowInDiscoveryDocument")
-                        .HasColumnType("bit");
+                    b.Property<bool>("ShowInDiscoveryDocument");
 
-                    b.Property<DateTime?>("Updated")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Updated");
 
                     b.HasKey("Id");
 
                     b.HasIndex("Name")
                         .IsUnique();
 
-                    b.ToTable("IdentityResources", (string)null);
+                    b.ToTable("IdentityResources");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("IdentityResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("IdentityResourceId");
 
                     b.Property<string>("Key")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("IdentityResourceId");
 
-                    b.ToTable("IdentityProperties", (string)null);
+                    b.ToTable("IdentityProperties");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
@@ -691,8 +564,6 @@
                         .HasForeignKey("ApiResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
@@ -702,8 +573,6 @@
                         .HasForeignKey("ApiResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
@@ -713,8 +582,6 @@
                         .HasForeignKey("ApiResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
@@ -724,8 +591,6 @@
                         .HasForeignKey("ApiScopeId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiScope");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
@@ -735,8 +600,6 @@
                         .HasForeignKey("ApiResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
@@ -746,8 +609,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
@@ -757,8 +618,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
@@ -768,8 +627,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
@@ -779,8 +636,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
@@ -790,8 +645,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
@@ -801,8 +654,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
@@ -812,8 +663,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
@@ -823,8 +672,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
@@ -834,8 +681,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
@@ -845,8 +690,6 @@
                         .HasForeignKey("IdentityResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("IdentityResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
@@ -856,52 +699,6 @@
                         .HasForeignKey("IdentityResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("IdentityResource");
-                });
-
-            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
-                {
-                    b.Navigation("Properties");
-
-                    b.Navigation("Scopes");
-
-                    b.Navigation("Secrets");
-
-                    b.Navigation("UserClaims");
-                });
-
-            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
-                {
-                    b.Navigation("UserClaims");
-                });
-
-            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
-                {
-                    b.Navigation("AllowedCorsOrigins");
-
-                    b.Navigation("AllowedGrantTypes");
-
-                    b.Navigation("AllowedScopes");
-
-                    b.Navigation("Claims");
-
-                    b.Navigation("ClientSecrets");
-
-                    b.Navigation("IdentityProviderRestrictions");
-
-                    b.Navigation("PostLogoutRedirectUris");
-
-                    b.Navigation("Properties");
-
-                    b.Navigation("RedirectUris");
-                });
-
-            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
-                {
-                    b.Navigation("Properties");
-
-                    b.Navigation("UserClaims");
                 });
 #pragma warning restore 612, 618
         }
Index: src/ApiGateways/Web.Bff.Shopping/aggregator/Startup.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ApiGateways/Web.Bff.Shopping/aggregator/Startup.cs b/src/ApiGateways/Web.Bff.Shopping/aggregator/Startup.cs
--- a/src/ApiGateways/Web.Bff.Shopping/aggregator/Startup.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/ApiGateways/Web.Bff.Shopping/aggregator/Startup.cs	(date 1673367535755)
@@ -14,11 +14,18 @@
     {
         services.AddHealthChecks()
             .AddCheck("self", () => HealthCheckResult.Healthy())
-            .AddUrlGroup(new Uri(Configuration["CatalogUrlHC"]), name: "catalogapi-check", tags: new string[] { "catalogapi" })
-            .AddUrlGroup(new Uri(Configuration["OrderingUrlHC"]), name: "orderingapi-check", tags: new string[] { "orderingapi" })
-            .AddUrlGroup(new Uri(Configuration["BasketUrlHC"]), name: "basketapi-check", tags: new string[] { "basketapi" })
-            .AddUrlGroup(new Uri(Configuration["IdentityUrlHC"]), name: "identityapi-check", tags: new string[] { "identityapi" })
-            .AddUrlGroup(new Uri(Configuration["PaymentUrlHC"]), name: "paymentapi-check", tags: new string[] { "paymentapi" });
+            .AddUrlGroup(new Uri(Configuration["CatalogUrlHC"]), name: "catalogapi-check",
+                tags: new string[] { "catalogapi" })
+            .AddUrlGroup(new Uri(Configuration["OrderingUrlHC"]), name: "orderingapi-check",
+                tags: new string[] { "orderingapi" })
+            .AddUrlGroup(new Uri(Configuration["BasketUrlHC"]), name: "basketapi-check",
+                tags: new string[] { "basketapi" })
+            .AddUrlGroup(new Uri(Configuration["IdentityUrlHC"]), name: "identityapi-check",
+                tags: new string[] { "identityapi" })
+            .AddUrlGroup(new Uri(Configuration["PaymentUrlHC"]), name: "paymentapi-check",
+                tags: new string[] { "paymentapi" });
+            // .AddUrlGroup(new Uri(Configuration["CouponUrlHC"]), name: "couponapi-check",
+            //     tags: new string[] { "couponapi" });
 
         services.AddCustomMvc(Configuration)
             .AddCustomAuthentication(Configuration)
@@ -162,6 +169,9 @@
         services.AddHttpClient<IOrderApiClient, OrderApiClient>()
             .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>()
             .AddDevspacesSupport();
+        
+        services.AddHttpClient<ICouponService, CouponService>()
+            .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();
 
         return services;
     }
Index: src/Services/Ordering/Ordering.API/Application/Commands/BalanceConfirmedCommandHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Commands/BalanceConfirmedCommandHandler.cs b/src/Services/Ordering/Ordering.API/Application/Commands/BalanceConfirmedCommandHandler.cs
new file mode 100644
--- /dev/null	(date 1673006416655)
+++ b/src/Services/Ordering/Ordering.API/Application/Commands/BalanceConfirmedCommandHandler.cs	(date 1673006416655)
@@ -0,0 +1,41 @@
+namespace Ordering.API.Application.Commands;
+
+public class BalanceConfirmedCommandHandler : IRequestHandler<BalanceConfirmedCommand, bool>
+{
+    private readonly IOrderRepository _orderRepository;
+
+    public BalanceConfirmedCommandHandler(IOrderRepository orderRepository)
+    {
+        _orderRepository = orderRepository;
+    }
+
+    public async Task<bool> Handle(BalanceConfirmedCommand command, CancellationToken cancellationToken)
+    {
+        var orderToUpdate = await _orderRepository.GetAsync(command.OrderNumber);
+
+        if (orderToUpdate == null)
+        {
+            return false;
+        }
+
+        orderToUpdate.ProcessBalanceConfirmed();
+
+        return await _orderRepository.UnitOfWork.SaveEntitiesAsync(cancellationToken);
+    }
+}
+
+public class BalanceConfirmIdenfifiedCommandHandler : IdentifiedCommandHandler<BalanceConfirmedCommand, bool>
+{
+    public BalanceConfirmIdenfifiedCommandHandler(
+        IMediator mediator,
+        IRequestManager requestManager,
+        ILogger<IdentifiedCommandHandler<BalanceConfirmedCommand, bool>> logger)
+        : base(mediator, requestManager, logger)
+    {
+    }
+
+    protected override bool CreateResultForDuplicateRequest()
+    {
+        return true;                // Ignore duplicate requests for processing order.
+    }
+}
\ No newline at end of file
Index: src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20210813072543_InitialMigration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20210813072543_InitialMigration.cs b/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20190729092011_InitialConfigurationMigration.cs
rename from src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20210813072543_InitialMigration.cs
rename to src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20190729092011_InitialConfigurationMigration.cs
--- a/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20210813072543_InitialMigration.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20190729092011_InitialConfigurationMigration.cs	(date 1673369528814)
@@ -1,9 +1,10 @@
 using System;
+using Microsoft.EntityFrameworkCore.Metadata;
 using Microsoft.EntityFrameworkCore.Migrations;
 
 namespace Identity.API.Migrations.ConfigurationDb
 {
-    public partial class InitialMigration : Migration
+    public partial class InitialConfigurationMigration : Migration
     {
         protected override void Up(MigrationBuilder migrationBuilder)
         {
@@ -11,16 +12,16 @@
                 name: "ApiResources",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    Enabled = table.Column<bool>(type: "bit", nullable: false),
-                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    DisplayName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
-                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
-                    Created = table.Column<DateTime>(type: "datetime2", nullable: false),
-                    Updated = table.Column<DateTime>(type: "datetime2", nullable: true),
-                    LastAccessed = table.Column<DateTime>(type: "datetime2", nullable: true),
-                    NonEditable = table.Column<bool>(type: "bit", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Enabled = table.Column<bool>(nullable: false),
+                    Name = table.Column<string>(maxLength: 200, nullable: false),
+                    DisplayName = table.Column<string>(maxLength: 200, nullable: true),
+                    Description = table.Column<string>(maxLength: 1000, nullable: true),
+                    Created = table.Column<DateTime>(nullable: false),
+                    Updated = table.Column<DateTime>(nullable: true),
+                    LastAccessed = table.Column<DateTime>(nullable: true),
+                    NonEditable = table.Column<bool>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -31,49 +32,49 @@
                 name: "Clients",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    Enabled = table.Column<bool>(type: "bit", nullable: false),
-                    ClientId = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    ProtocolType = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    RequireClientSecret = table.Column<bool>(type: "bit", nullable: false),
-                    ClientName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
-                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
-                    ClientUri = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
-                    LogoUri = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
-                    RequireConsent = table.Column<bool>(type: "bit", nullable: false),
-                    AllowRememberConsent = table.Column<bool>(type: "bit", nullable: false),
-                    AlwaysIncludeUserClaimsInIdToken = table.Column<bool>(type: "bit", nullable: false),
-                    RequirePkce = table.Column<bool>(type: "bit", nullable: false),
-                    AllowPlainTextPkce = table.Column<bool>(type: "bit", nullable: false),
-                    AllowAccessTokensViaBrowser = table.Column<bool>(type: "bit", nullable: false),
-                    FrontChannelLogoutUri = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
-                    FrontChannelLogoutSessionRequired = table.Column<bool>(type: "bit", nullable: false),
-                    BackChannelLogoutUri = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
-                    BackChannelLogoutSessionRequired = table.Column<bool>(type: "bit", nullable: false),
-                    AllowOfflineAccess = table.Column<bool>(type: "bit", nullable: false),
-                    IdentityTokenLifetime = table.Column<int>(type: "int", nullable: false),
-                    AccessTokenLifetime = table.Column<int>(type: "int", nullable: false),
-                    AuthorizationCodeLifetime = table.Column<int>(type: "int", nullable: false),
-                    ConsentLifetime = table.Column<int>(type: "int", nullable: true),
-                    AbsoluteRefreshTokenLifetime = table.Column<int>(type: "int", nullable: false),
-                    SlidingRefreshTokenLifetime = table.Column<int>(type: "int", nullable: false),
-                    RefreshTokenUsage = table.Column<int>(type: "int", nullable: false),
-                    UpdateAccessTokenClaimsOnRefresh = table.Column<bool>(type: "bit", nullable: false),
-                    RefreshTokenExpiration = table.Column<int>(type: "int", nullable: false),
-                    AccessTokenType = table.Column<int>(type: "int", nullable: false),
-                    EnableLocalLogin = table.Column<bool>(type: "bit", nullable: false),
-                    IncludeJwtId = table.Column<bool>(type: "bit", nullable: false),
-                    AlwaysSendClientClaims = table.Column<bool>(type: "bit", nullable: false),
-                    ClientClaimsPrefix = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
-                    PairWiseSubjectSalt = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
-                    Created = table.Column<DateTime>(type: "datetime2", nullable: false),
-                    Updated = table.Column<DateTime>(type: "datetime2", nullable: true),
-                    LastAccessed = table.Column<DateTime>(type: "datetime2", nullable: true),
-                    UserSsoLifetime = table.Column<int>(type: "int", nullable: true),
-                    UserCodeType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
-                    DeviceCodeLifetime = table.Column<int>(type: "int", nullable: false),
-                    NonEditable = table.Column<bool>(type: "bit", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Enabled = table.Column<bool>(nullable: false),
+                    ClientId = table.Column<string>(maxLength: 200, nullable: false),
+                    ProtocolType = table.Column<string>(maxLength: 200, nullable: false),
+                    RequireClientSecret = table.Column<bool>(nullable: false),
+                    ClientName = table.Column<string>(maxLength: 200, nullable: true),
+                    Description = table.Column<string>(maxLength: 1000, nullable: true),
+                    ClientUri = table.Column<string>(maxLength: 2000, nullable: true),
+                    LogoUri = table.Column<string>(maxLength: 2000, nullable: true),
+                    RequireConsent = table.Column<bool>(nullable: false),
+                    AllowRememberConsent = table.Column<bool>(nullable: false),
+                    AlwaysIncludeUserClaimsInIdToken = table.Column<bool>(nullable: false),
+                    RequirePkce = table.Column<bool>(nullable: false),
+                    AllowPlainTextPkce = table.Column<bool>(nullable: false),
+                    AllowAccessTokensViaBrowser = table.Column<bool>(nullable: false),
+                    FrontChannelLogoutUri = table.Column<string>(maxLength: 2000, nullable: true),
+                    FrontChannelLogoutSessionRequired = table.Column<bool>(nullable: false),
+                    BackChannelLogoutUri = table.Column<string>(maxLength: 2000, nullable: true),
+                    BackChannelLogoutSessionRequired = table.Column<bool>(nullable: false),
+                    AllowOfflineAccess = table.Column<bool>(nullable: false),
+                    IdentityTokenLifetime = table.Column<int>(nullable: false),
+                    AccessTokenLifetime = table.Column<int>(nullable: false),
+                    AuthorizationCodeLifetime = table.Column<int>(nullable: false),
+                    ConsentLifetime = table.Column<int>(nullable: true),
+                    AbsoluteRefreshTokenLifetime = table.Column<int>(nullable: false),
+                    SlidingRefreshTokenLifetime = table.Column<int>(nullable: false),
+                    RefreshTokenUsage = table.Column<int>(nullable: false),
+                    UpdateAccessTokenClaimsOnRefresh = table.Column<bool>(nullable: false),
+                    RefreshTokenExpiration = table.Column<int>(nullable: false),
+                    AccessTokenType = table.Column<int>(nullable: false),
+                    EnableLocalLogin = table.Column<bool>(nullable: false),
+                    IncludeJwtId = table.Column<bool>(nullable: false),
+                    AlwaysSendClientClaims = table.Column<bool>(nullable: false),
+                    ClientClaimsPrefix = table.Column<string>(maxLength: 200, nullable: true),
+                    PairWiseSubjectSalt = table.Column<string>(maxLength: 200, nullable: true),
+                    Created = table.Column<DateTime>(nullable: false),
+                    Updated = table.Column<DateTime>(nullable: true),
+                    LastAccessed = table.Column<DateTime>(nullable: true),
+                    UserSsoLifetime = table.Column<int>(nullable: true),
+                    UserCodeType = table.Column<string>(maxLength: 100, nullable: true),
+                    DeviceCodeLifetime = table.Column<int>(nullable: false),
+                    NonEditable = table.Column<bool>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -84,18 +85,18 @@
                 name: "IdentityResources",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    Enabled = table.Column<bool>(type: "bit", nullable: false),
-                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    DisplayName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
-                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
-                    Required = table.Column<bool>(type: "bit", nullable: false),
-                    Emphasize = table.Column<bool>(type: "bit", nullable: false),
-                    ShowInDiscoveryDocument = table.Column<bool>(type: "bit", nullable: false),
-                    Created = table.Column<DateTime>(type: "datetime2", nullable: false),
-                    Updated = table.Column<DateTime>(type: "datetime2", nullable: true),
-                    NonEditable = table.Column<bool>(type: "bit", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Enabled = table.Column<bool>(nullable: false),
+                    Name = table.Column<string>(maxLength: 200, nullable: false),
+                    DisplayName = table.Column<string>(maxLength: 200, nullable: true),
+                    Description = table.Column<string>(maxLength: 1000, nullable: true),
+                    Required = table.Column<bool>(nullable: false),
+                    Emphasize = table.Column<bool>(nullable: false),
+                    ShowInDiscoveryDocument = table.Column<bool>(nullable: false),
+                    Created = table.Column<DateTime>(nullable: false),
+                    Updated = table.Column<DateTime>(nullable: true),
+                    NonEditable = table.Column<bool>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -106,10 +107,10 @@
                 name: "ApiClaims",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    ApiResourceId = table.Column<int>(type: "int", nullable: false),
-                    Type = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Type = table.Column<string>(maxLength: 200, nullable: false),
+                    ApiResourceId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -126,11 +127,11 @@
                 name: "ApiProperties",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    ApiResourceId = table.Column<int>(type: "int", nullable: false),
-                    Key = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
-                    Value = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Key = table.Column<string>(maxLength: 250, nullable: false),
+                    Value = table.Column<string>(maxLength: 2000, nullable: false),
+                    ApiResourceId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -147,15 +148,15 @@
                 name: "ApiScopes",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    DisplayName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
-                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
-                    Required = table.Column<bool>(type: "bit", nullable: false),
-                    Emphasize = table.Column<bool>(type: "bit", nullable: false),
-                    ShowInDiscoveryDocument = table.Column<bool>(type: "bit", nullable: false),
-                    ApiResourceId = table.Column<int>(type: "int", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Name = table.Column<string>(maxLength: 200, nullable: false),
+                    DisplayName = table.Column<string>(maxLength: 200, nullable: true),
+                    Description = table.Column<string>(maxLength: 1000, nullable: true),
+                    Required = table.Column<bool>(nullable: false),
+                    Emphasize = table.Column<bool>(nullable: false),
+                    ShowInDiscoveryDocument = table.Column<bool>(nullable: false),
+                    ApiResourceId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -172,14 +173,14 @@
                 name: "ApiSecrets",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    ApiResourceId = table.Column<int>(type: "int", nullable: false),
-                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
-                    Value = table.Column<string>(type: "nvarchar(4000)", maxLength: 4000, nullable: false),
-                    Expiration = table.Column<DateTime>(type: "datetime2", nullable: true),
-                    Type = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
-                    Created = table.Column<DateTime>(type: "datetime2", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Description = table.Column<string>(maxLength: 1000, nullable: true),
+                    Value = table.Column<string>(maxLength: 4000, nullable: false),
+                    Expiration = table.Column<DateTime>(nullable: true),
+                    Type = table.Column<string>(maxLength: 250, nullable: false),
+                    Created = table.Column<DateTime>(nullable: false),
+                    ApiResourceId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -196,11 +197,11 @@
                 name: "ClientClaims",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    Type = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
-                    Value = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
-                    ClientId = table.Column<int>(type: "int", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Type = table.Column<string>(maxLength: 250, nullable: false),
+                    Value = table.Column<string>(maxLength: 250, nullable: false),
+                    ClientId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -217,10 +218,10 @@
                 name: "ClientCorsOrigins",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    Origin = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
-                    ClientId = table.Column<int>(type: "int", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Origin = table.Column<string>(maxLength: 150, nullable: false),
+                    ClientId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -237,10 +238,10 @@
                 name: "ClientGrantTypes",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    GrantType = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
-                    ClientId = table.Column<int>(type: "int", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    GrantType = table.Column<string>(maxLength: 250, nullable: false),
+                    ClientId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -257,10 +258,10 @@
                 name: "ClientIdPRestrictions",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    Provider = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    ClientId = table.Column<int>(type: "int", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Provider = table.Column<string>(maxLength: 200, nullable: false),
+                    ClientId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -277,10 +278,10 @@
                 name: "ClientPostLogoutRedirectUris",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    PostLogoutRedirectUri = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: false),
-                    ClientId = table.Column<int>(type: "int", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    PostLogoutRedirectUri = table.Column<string>(maxLength: 2000, nullable: false),
+                    ClientId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -297,11 +298,11 @@
                 name: "ClientProperties",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    ClientId = table.Column<int>(type: "int", nullable: false),
-                    Key = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
-                    Value = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Key = table.Column<string>(maxLength: 250, nullable: false),
+                    Value = table.Column<string>(maxLength: 2000, nullable: false),
+                    ClientId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -318,10 +319,10 @@
                 name: "ClientRedirectUris",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    RedirectUri = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: false),
-                    ClientId = table.Column<int>(type: "int", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    RedirectUri = table.Column<string>(maxLength: 2000, nullable: false),
+                    ClientId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -338,10 +339,10 @@
                 name: "ClientScopes",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    Scope = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
-                    ClientId = table.Column<int>(type: "int", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Scope = table.Column<string>(maxLength: 200, nullable: false),
+                    ClientId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -358,14 +359,14 @@
                 name: "ClientSecrets",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    ClientId = table.Column<int>(type: "int", nullable: false),
-                    Description = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
-                    Value = table.Column<string>(type: "nvarchar(4000)", maxLength: 4000, nullable: false),
-                    Expiration = table.Column<DateTime>(type: "datetime2", nullable: true),
-                    Type = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
-                    Created = table.Column<DateTime>(type: "datetime2", nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Description = table.Column<string>(maxLength: 2000, nullable: true),
+                    Value = table.Column<string>(maxLength: 4000, nullable: false),
+                    Expiration = table.Column<DateTime>(nullable: true),
+                    Type = table.Column<string>(maxLength: 250, nullable: false),
+                    Created = table.Column<DateTime>(nullable: false),
+                    ClientId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -382,10 +383,10 @@
                 name: "IdentityClaims",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    IdentityResourceId = table.Column<int>(type: "int", nullable: false),
-                    Type = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Type = table.Column<string>(maxLength: 200, nullable: false),
+                    IdentityResourceId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -402,11 +403,11 @@
                 name: "IdentityProperties",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    IdentityResourceId = table.Column<int>(type: "int", nullable: false),
-                    Key = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
-                    Value = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Key = table.Column<string>(maxLength: 250, nullable: false),
+                    Value = table.Column<string>(maxLength: 2000, nullable: false),
+                    IdentityResourceId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -423,10 +424,10 @@
                 name: "ApiScopeClaims",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    ApiScopeId = table.Column<int>(type: "int", nullable: false),
-                    Type = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Type = table.Column<string>(maxLength: 200, nullable: false),
+                    ApiScopeId = table.Column<int>(nullable: false)
                 },
                 constraints: table =>
                 {
Index: src/Services/Ordering/Ordering.UnitTests/Application/NewOrderCommandHandlerTest.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.UnitTests/Application/NewOrderCommandHandlerTest.cs b/src/Services/Ordering/Ordering.UnitTests/Application/NewOrderCommandHandlerTest.cs
--- a/src/Services/Ordering/Ordering.UnitTests/Application/NewOrderCommandHandlerTest.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.UnitTests/Application/NewOrderCommandHandlerTest.cs	(date 1673048133170)
@@ -60,7 +60,7 @@
 
     private Order FakeOrder()
     {
-        return new Order("1", "fakeName", new Address("street", "city", "state", "country", "zipcode"), 1, "12", "111", "fakeName", DateTime.Now.AddYears(1));
+        return new Order("1", "fakeName", new Address("street", "city", "state", "country", "zipcode"), 1, "12", "111", "fakeName", DateTime.Now.AddYears(1), "DISC-10", 10, 200);
     }
 
     private CreateOrderCommand FakeOrderRequestWithBuyer(Dictionary<string, object> args = null)
@@ -78,6 +78,9 @@
             cardExpiration: args != null && args.ContainsKey("cardExpiration") ? (DateTime)args["cardExpiration"] : DateTime.MinValue,
             cardSecurityNumber: args != null && args.ContainsKey("cardSecurityNumber") ? (string)args["cardSecurityNumber"] : "123",
             cardHolderName: args != null && args.ContainsKey("cardHolderName") ? (string)args["cardHolderName"] : "XXX",
-            cardTypeId: args != null && args.ContainsKey("cardTypeId") ? (int)args["cardTypeId"] : 0);
+            cardTypeId: args != null && args.ContainsKey("cardTypeId") ? (int)args["cardTypeId"] : 0,
+            codeDiscount: args != null && args.ContainsKey("codeDiscount") ? (string)args["codeDiscount"] : "DISC-5",
+            discount: args != null && args.ContainsKey("discount") ? (int)args["discount"] : 0,
+            balance: args != null && args.ContainsKey("balance") ? (int)args["balance"] : 0);
     }
 }
Index: src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20210813072543_InitialMigration.Designer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20210813072543_InitialMigration.Designer.cs b/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20190729092011_InitialConfigurationMigration.Designer.cs
rename from src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20210813072543_InitialMigration.Designer.cs
rename to src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20190729092011_InitialConfigurationMigration.Designer.cs
--- a/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20210813072543_InitialMigration.Designer.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Identity/Identity.API/Migrations/ConfigurationDb/20190729092011_InitialConfigurationMigration.Designer.cs	(date 1673369528819)
@@ -10,140 +10,116 @@
 namespace Identity.API.Migrations.ConfigurationDb
 {
     [DbContext(typeof(ConfigurationDbContext))]
-    [Migration("20210813072543_InitialMigration")]
-    partial class InitialMigration
+    [Migration("20190729092011_InitialConfigurationMigration")]
+    partial class InitialConfigurationMigration
     {
         protected override void BuildTargetModel(ModelBuilder modelBuilder)
         {
 #pragma warning disable 612, 618
             modelBuilder
+                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                 .HasAnnotation("Relational:MaxIdentifierLength", 128)
-                .HasAnnotation("ProductVersion", "6.0.0")
                 .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
                     b.Property<string>("DisplayName")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("Enabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Enabled");
 
-                    b.Property<DateTime?>("LastAccessed")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("LastAccessed");
 
                     b.Property<string>("Name")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("NonEditable")
-                        .HasColumnType("bit");
+                    b.Property<bool>("NonEditable");
 
-                    b.Property<DateTime?>("Updated")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Updated");
 
                     b.HasKey("Id");
 
                     b.HasIndex("Name")
                         .IsUnique();
 
-                    b.ToTable("ApiResources", (string)null);
+                    b.ToTable("ApiResources");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiResourceId");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ApiResourceId");
 
-                    b.ToTable("ApiClaims", (string)null);
+                    b.ToTable("ApiClaims");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiResourceId");
 
                     b.Property<string>("Key")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ApiResourceId");
 
-                    b.ToTable("ApiProperties", (string)null);
+                    b.ToTable("ApiProperties");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiResourceId");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
                     b.Property<string>("DisplayName")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("Emphasize")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Emphasize");
 
                     b.Property<string>("Name")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("Required")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Required");
 
-                    b.Property<bool>("ShowInDiscoveryDocument")
-                        .HasColumnType("bit");
+                    b.Property<bool>("ShowInDiscoveryDocument");
 
                     b.HasKey("Id");
 
@@ -152,538 +128,435 @@
                     b.HasIndex("Name")
                         .IsUnique();
 
-                    b.ToTable("ApiScopes", (string)null);
+                    b.ToTable("ApiScopes");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiScopeId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiScopeId");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ApiScopeId");
 
-                    b.ToTable("ApiScopeClaims", (string)null);
+                    b.ToTable("ApiScopeClaims");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ApiResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("ApiResourceId");
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
-                    b.Property<DateTime?>("Expiration")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Expiration");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(4000)
-                        .HasColumnType("nvarchar(4000)");
+                        .HasMaxLength(4000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ApiResourceId");
 
-                    b.ToTable("ApiSecrets", (string)null);
+                    b.ToTable("ApiSecrets");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("AbsoluteRefreshTokenLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("AbsoluteRefreshTokenLifetime");
 
-                    b.Property<int>("AccessTokenLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("AccessTokenLifetime");
 
-                    b.Property<int>("AccessTokenType")
-                        .HasColumnType("int");
+                    b.Property<int>("AccessTokenType");
 
-                    b.Property<bool>("AllowAccessTokensViaBrowser")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AllowAccessTokensViaBrowser");
 
-                    b.Property<bool>("AllowOfflineAccess")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AllowOfflineAccess");
 
-                    b.Property<bool>("AllowPlainTextPkce")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AllowPlainTextPkce");
 
-                    b.Property<bool>("AllowRememberConsent")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AllowRememberConsent");
 
-                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken");
 
-                    b.Property<bool>("AlwaysSendClientClaims")
-                        .HasColumnType("bit");
+                    b.Property<bool>("AlwaysSendClientClaims");
 
-                    b.Property<int>("AuthorizationCodeLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("AuthorizationCodeLifetime");
 
-                    b.Property<bool>("BackChannelLogoutSessionRequired")
-                        .HasColumnType("bit");
+                    b.Property<bool>("BackChannelLogoutSessionRequired");
 
                     b.Property<string>("BackChannelLogoutUri")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.Property<string>("ClientClaimsPrefix")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientId")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientName")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientUri")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
-                    b.Property<int?>("ConsentLifetime")
-                        .HasColumnType("int");
+                    b.Property<int?>("ConsentLifetime");
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
-                    b.Property<int>("DeviceCodeLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("DeviceCodeLifetime");
 
-                    b.Property<bool>("EnableLocalLogin")
-                        .HasColumnType("bit");
+                    b.Property<bool>("EnableLocalLogin");
 
-                    b.Property<bool>("Enabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Enabled");
 
-                    b.Property<bool>("FrontChannelLogoutSessionRequired")
-                        .HasColumnType("bit");
+                    b.Property<bool>("FrontChannelLogoutSessionRequired");
 
                     b.Property<string>("FrontChannelLogoutUri")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
-                    b.Property<int>("IdentityTokenLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("IdentityTokenLifetime");
 
-                    b.Property<bool>("IncludeJwtId")
-                        .HasColumnType("bit");
+                    b.Property<bool>("IncludeJwtId");
 
-                    b.Property<DateTime?>("LastAccessed")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("LastAccessed");
 
                     b.Property<string>("LogoUri")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
-                    b.Property<bool>("NonEditable")
-                        .HasColumnType("bit");
+                    b.Property<bool>("NonEditable");
 
                     b.Property<string>("PairWiseSubjectSalt")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ProtocolType")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<int>("RefreshTokenExpiration")
-                        .HasColumnType("int");
+                    b.Property<int>("RefreshTokenExpiration");
 
-                    b.Property<int>("RefreshTokenUsage")
-                        .HasColumnType("int");
+                    b.Property<int>("RefreshTokenUsage");
 
-                    b.Property<bool>("RequireClientSecret")
-                        .HasColumnType("bit");
+                    b.Property<bool>("RequireClientSecret");
 
-                    b.Property<bool>("RequireConsent")
-                        .HasColumnType("bit");
+                    b.Property<bool>("RequireConsent");
 
-                    b.Property<bool>("RequirePkce")
-                        .HasColumnType("bit");
+                    b.Property<bool>("RequirePkce");
 
-                    b.Property<int>("SlidingRefreshTokenLifetime")
-                        .HasColumnType("int");
+                    b.Property<int>("SlidingRefreshTokenLifetime");
 
-                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
-                        .HasColumnType("bit");
+                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh");
 
-                    b.Property<DateTime?>("Updated")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Updated");
 
                     b.Property<string>("UserCodeType")
-                        .HasMaxLength(100)
-                        .HasColumnType("nvarchar(100)");
+                        .HasMaxLength(100);
 
-                    b.Property<int?>("UserSsoLifetime")
-                        .HasColumnType("int");
+                    b.Property<int?>("UserSsoLifetime");
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId")
                         .IsUnique();
 
-                    b.ToTable("Clients", (string)null);
+                    b.ToTable("Clients");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientClaims", (string)null);
+                    b.ToTable("ClientClaims");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Origin")
                         .IsRequired()
-                        .HasMaxLength(150)
-                        .HasColumnType("nvarchar(150)");
+                        .HasMaxLength(150);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientCorsOrigins", (string)null);
+                    b.ToTable("ClientCorsOrigins");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("GrantType")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientGrantTypes", (string)null);
+                    b.ToTable("ClientGrantTypes");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Provider")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientIdPRestrictions", (string)null);
+                    b.ToTable("ClientIdPRestrictions");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("PostLogoutRedirectUri")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientPostLogoutRedirectUris", (string)null);
+                    b.ToTable("ClientPostLogoutRedirectUris");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Key")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientProperties", (string)null);
+                    b.ToTable("ClientProperties");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("RedirectUri")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientRedirectUris", (string)null);
+                    b.ToTable("ClientRedirectUris");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
                     b.Property<string>("Scope")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientScopes", (string)null);
+                    b.ToTable("ClientScopes");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("ClientId")
-                        .HasColumnType("int");
+                    b.Property<int>("ClientId");
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
-                    b.Property<DateTime?>("Expiration")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Expiration");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(4000)
-                        .HasColumnType("nvarchar(4000)");
+                        .HasMaxLength(4000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("ClientId");
 
-                    b.ToTable("ClientSecrets", (string)null);
+                    b.ToTable("ClientSecrets");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("IdentityResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("IdentityResourceId");
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("Id");
 
                     b.HasIndex("IdentityResourceId");
 
-                    b.ToTable("IdentityClaims", (string)null);
+                    b.ToTable("IdentityClaims");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<DateTime>("Created")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("Created");
 
                     b.Property<string>("Description")
-                        .HasMaxLength(1000)
-                        .HasColumnType("nvarchar(1000)");
+                        .HasMaxLength(1000);
 
                     b.Property<string>("DisplayName")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("Emphasize")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Emphasize");
 
-                    b.Property<bool>("Enabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Enabled");
 
                     b.Property<string>("Name")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<bool>("NonEditable")
-                        .HasColumnType("bit");
+                    b.Property<bool>("NonEditable");
 
-                    b.Property<bool>("Required")
-                        .HasColumnType("bit");
+                    b.Property<bool>("Required");
 
-                    b.Property<bool>("ShowInDiscoveryDocument")
-                        .HasColumnType("bit");
+                    b.Property<bool>("ShowInDiscoveryDocument");
 
-                    b.Property<DateTime?>("Updated")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Updated");
 
                     b.HasKey("Id");
 
                     b.HasIndex("Name")
                         .IsUnique();
 
-                    b.ToTable("IdentityResources", (string)null);
+                    b.ToTable("IdentityResources");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<int>("IdentityResourceId")
-                        .HasColumnType("int");
+                    b.Property<int>("IdentityResourceId");
 
                     b.Property<string>("Key")
                         .IsRequired()
-                        .HasMaxLength(250)
-                        .HasColumnType("nvarchar(250)");
+                        .HasMaxLength(250);
 
                     b.Property<string>("Value")
                         .IsRequired()
-                        .HasMaxLength(2000)
-                        .HasColumnType("nvarchar(2000)");
+                        .HasMaxLength(2000);
 
                     b.HasKey("Id");
 
                     b.HasIndex("IdentityResourceId");
 
-                    b.ToTable("IdentityProperties", (string)null);
+                    b.ToTable("IdentityProperties");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
@@ -693,8 +566,6 @@
                         .HasForeignKey("ApiResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
@@ -704,8 +575,6 @@
                         .HasForeignKey("ApiResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
@@ -715,8 +584,6 @@
                         .HasForeignKey("ApiResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
@@ -726,8 +593,6 @@
                         .HasForeignKey("ApiScopeId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiScope");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
@@ -737,8 +602,6 @@
                         .HasForeignKey("ApiResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("ApiResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
@@ -748,8 +611,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
@@ -759,8 +620,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
@@ -770,8 +629,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
@@ -781,8 +638,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
@@ -792,8 +647,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
@@ -803,8 +656,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
@@ -814,8 +665,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
@@ -825,8 +674,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
@@ -836,8 +683,6 @@
                         .HasForeignKey("ClientId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Client");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
@@ -847,8 +692,6 @@
                         .HasForeignKey("IdentityResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("IdentityResource");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
@@ -858,52 +701,6 @@
                         .HasForeignKey("IdentityResourceId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("IdentityResource");
-                });
-
-            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
-                {
-                    b.Navigation("Properties");
-
-                    b.Navigation("Scopes");
-
-                    b.Navigation("Secrets");
-
-                    b.Navigation("UserClaims");
-                });
-
-            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
-                {
-                    b.Navigation("UserClaims");
-                });
-
-            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
-                {
-                    b.Navigation("AllowedCorsOrigins");
-
-                    b.Navigation("AllowedGrantTypes");
-
-                    b.Navigation("AllowedScopes");
-
-                    b.Navigation("Claims");
-
-                    b.Navigation("ClientSecrets");
-
-                    b.Navigation("IdentityProviderRestrictions");
-
-                    b.Navigation("PostLogoutRedirectUris");
-
-                    b.Navigation("Properties");
-
-                    b.Navigation("RedirectUris");
-                });
-
-            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
-                {
-                    b.Navigation("Properties");
-
-                    b.Navigation("UserClaims");
                 });
 #pragma warning restore 612, 618
         }
Index: src/Services/Ordering/Ordering.API/Application/Queries/OrderViewModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Queries/OrderViewModel.cs b/src/Services/Ordering/Ordering.API/Application/Queries/OrderViewModel.cs
--- a/src/Services/Ordering/Ordering.API/Application/Queries/OrderViewModel.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Application/Queries/OrderViewModel.cs	(date 1673090096651)
@@ -19,7 +19,11 @@
     public string zipcode { get; init; }
     public string country { get; init; }
     public List<Orderitem> orderitems { get; set; }
+    public decimal subtotal { get; set; }
     public decimal total { get; set; }
+    public string coupon { get; set; }
+    public decimal discount { get; set; }
+    public int balance { get; set; }
 }
 
 public record OrderSummary
Index: src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/PersistedGrantDbContextModelSnapshot.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/PersistedGrantDbContextModelSnapshot.cs b/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/PersistedGrantDbContextModelSnapshot.cs
--- a/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/PersistedGrantDbContextModelSnapshot.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/PersistedGrantDbContextModelSnapshot.cs	(date 1673369529054)
@@ -15,90 +15,72 @@
         {
 #pragma warning disable 612, 618
             modelBuilder
+                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                 .HasAnnotation("Relational:MaxIdentifierLength", 128)
-                .HasAnnotation("ProductVersion", "6.0.0")
                 .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                 {
                     b.Property<string>("UserCode")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientId")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<DateTime>("CreationTime")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("CreationTime");
 
                     b.Property<string>("Data")
                         .IsRequired()
-                        .HasMaxLength(50000)
-                        .HasColumnType("nvarchar(max)");
+                        .HasMaxLength(50000);
 
                     b.Property<string>("DeviceCode")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<DateTime?>("Expiration")
-                        .IsRequired()
-                        .HasColumnType("datetime2");
+                        .IsRequired();
 
                     b.Property<string>("SubjectId")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("UserCode");
 
                     b.HasIndex("DeviceCode")
                         .IsUnique();
 
-                    b.HasIndex("Expiration");
-
-                    b.ToTable("DeviceCodes", (string)null);
+                    b.ToTable("DeviceCodes");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                 {
                     b.Property<string>("Key")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientId")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<DateTime>("CreationTime")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("CreationTime");
 
                     b.Property<string>("Data")
                         .IsRequired()
-                        .HasMaxLength(50000)
-                        .HasColumnType("nvarchar(max)");
+                        .HasMaxLength(50000);
 
-                    b.Property<DateTime?>("Expiration")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Expiration");
 
                     b.Property<string>("SubjectId")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(50)
-                        .HasColumnType("nvarchar(50)");
+                        .HasMaxLength(50);
 
                     b.HasKey("Key");
 
-                    b.HasIndex("Expiration");
-
                     b.HasIndex("SubjectId", "ClientId", "Type");
 
-                    b.ToTable("PersistedGrants", (string)null);
+                    b.ToTable("PersistedGrants");
                 });
 #pragma warning restore 612, 618
         }
Index: src/Services/Coupon/Coupon.API/Infrastructure/Repositories/CouponContext.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/CouponContext.cs b/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/CouponContext.cs
--- a/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/CouponContext.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/CouponContext.cs	(date 1672770219822)
@@ -17,7 +17,7 @@
                 throw new MongoConfigurationException("Cannot connect to the database. The connection string is not valid or the database is not accessible");
             }
 
-            _database = client.GetDatabase(settings.Value.CouponMongoDatabase);
+            _database = client.GetDatabase(settings.Value.MongoDatabase);
         }
 
         public IMongoCollection<Coupon>? Coupons => _database?.GetCollection<Coupon>("CouponCollection");
Index: src/Services/Ordering/Ordering.API/Application/Queries/OrderQueries.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Queries/OrderQueries.cs b/src/Services/Ordering/Ordering.API/Application/Queries/OrderQueries.cs
--- a/src/Services/Ordering/Ordering.API/Application/Queries/OrderQueries.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Application/Queries/OrderQueries.cs	(date 1673090428293)
@@ -18,7 +18,8 @@
 
         var result = await connection.QueryAsync<dynamic>(
             @"select o.[Id] as ordernumber,o.OrderDate as date, o.Description as description,
-                    o.Address_City as city, o.Address_Country as country, o.Address_State as state, o.Address_Street as street, o.Address_ZipCode as zipcode,
+                    o.Address_City as city, o.Address_Country as country, o.Address_State as state, o.Address_Street as street, o.Address_ZipCode as zipcode, o.DiscountCode as coupon,
+                    o.Discount as discount, o.Balance as balance,
                     os.Name as status, 
                     oi.ProductName as productname, oi.Units as units, oi.UnitPrice as unitprice, oi.PictureUrl as pictureurl
                     FROM ordering.Orders o
@@ -70,6 +71,10 @@
             zipcode = result[0].zipcode,
             country = result[0].country,
             orderitems = new List<Orderitem>(),
+            subtotal = 0,
+            coupon = result[0].coupon,
+            discount = result[0].discount ?? 0m,
+            balance = result[0].balance ?? 0,
             total = 0
         };
 
@@ -82,10 +87,14 @@
                 unitprice = (double)item.unitprice,
                 pictureurl = item.pictureurl
             };
-
-            order.total += item.units * item.unitprice;
+            order.balance += order.balance;
+            order.subtotal += item.units * item.unitprice;
             order.orderitems.Add(orderitem);
         }
+        
+        order.total = order.discount < order.subtotal
+            ? order.subtotal - order.discount
+            : 0;
 
         return order;
     }
Index: src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20190729092100_InitialPersistedGrantMigration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20190729092100_InitialPersistedGrantMigration.cs b/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20190729092100_InitialPersistedGrantMigration.cs
new file mode 100644
--- /dev/null	(date 1673369529058)
+++ b/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20190729092100_InitialPersistedGrantMigration.cs	(date 1673369529058)
@@ -0,0 +1,65 @@
+using System;
+using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace Identity.API.Migrations.PersistedGrantDb
+{
+    public partial class InitialPersistedGrantMigration : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "DeviceCodes",
+                columns: table => new
+                {
+                    UserCode = table.Column<string>(maxLength: 200, nullable: false),
+                    DeviceCode = table.Column<string>(maxLength: 200, nullable: false),
+                    SubjectId = table.Column<string>(maxLength: 200, nullable: true),
+                    ClientId = table.Column<string>(maxLength: 200, nullable: false),
+                    CreationTime = table.Column<DateTime>(nullable: false),
+                    Expiration = table.Column<DateTime>(nullable: false),
+                    Data = table.Column<string>(maxLength: 50000, nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_DeviceCodes", x => x.UserCode);
+                });
+
+            migrationBuilder.CreateTable(
+                name: "PersistedGrants",
+                columns: table => new
+                {
+                    Key = table.Column<string>(maxLength: 200, nullable: false),
+                    Type = table.Column<string>(maxLength: 50, nullable: false),
+                    SubjectId = table.Column<string>(maxLength: 200, nullable: true),
+                    ClientId = table.Column<string>(maxLength: 200, nullable: false),
+                    CreationTime = table.Column<DateTime>(nullable: false),
+                    Expiration = table.Column<DateTime>(nullable: true),
+                    Data = table.Column<string>(maxLength: 50000, nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_PersistedGrants", x => x.Key);
+                });
+
+            migrationBuilder.CreateIndex(
+                name: "IX_DeviceCodes_DeviceCode",
+                table: "DeviceCodes",
+                column: "DeviceCode",
+                unique: true);
+
+            migrationBuilder.CreateIndex(
+                name: "IX_PersistedGrants_SubjectId_ClientId_Type",
+                table: "PersistedGrants",
+                columns: new[] { "SubjectId", "ClientId", "Type" });
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "DeviceCodes");
+
+            migrationBuilder.DropTable(
+                name: "PersistedGrants");
+        }
+    }
+}
Index: src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderBalance/OrderStatusChangedToAwaitingBalanceUpdateDomainEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderBalance/OrderStatusChangedToAwaitingBalanceUpdateDomainEventHandler.cs b/src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderBalance/OrderStatusChangedToAwaitingBalanceUpdateDomainEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673049423652)
+++ b/src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderBalance/OrderStatusChangedToAwaitingBalanceUpdateDomainEventHandler.cs	(date 1673049423652)
@@ -0,0 +1,37 @@
+using Coupon.API.IntegrationEvents.Events;
+using Ordering.Domain.Events;
+
+namespace Microsoft.eShopOnContainers.Services.Ordering.API.Application.DomainEventHandlers.OrderBalance;
+
+public class OrderStatusChangedToAwaitingBalanceUpdateDomainEventHandler : INotificationHandler<OrderStatusChangedToAwaitingBalanceUpdateDomainEvent>
+{
+    private readonly IOrderRepository _orderRepository;
+    private readonly IBuyerRepository _buyerRepository;
+    private readonly ILoggerFactory _logger;
+    private readonly IOrderingIntegrationEventService _orderingIntegrationEventService;
+
+    public OrderStatusChangedToAwaitingBalanceUpdateDomainEventHandler(
+        IOrderRepository orderRepository,
+        IBuyerRepository buyerRepository,
+        ILoggerFactory logger,
+        IOrderingIntegrationEventService orderingIntegrationEventService)
+    {
+        _orderRepository = orderRepository ?? throw new ArgumentNullException(nameof(orderRepository));
+        _buyerRepository = buyerRepository ?? throw new ArgumentNullException(nameof(buyerRepository));
+        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
+        _orderingIntegrationEventService = orderingIntegrationEventService;
+    }
+
+    public async Task Handle(OrderStatusChangedToAwaitingBalanceUpdateDomainEvent domainEvent, CancellationToken cancellationToken)
+    {
+        _logger.CreateLogger<OrderStatusChangedToAwaitingBalanceUpdateDomainEventHandler>()
+            .LogTrace("Order with Id: {OrderId} has been successfully updated to status {Status} ({Id})", domainEvent.OrderId, nameof(OrderStatus.Validated), OrderStatus.Validated.Id);
+
+        var order = await _orderRepository.GetAsync(domainEvent.OrderId);
+        var buyer = await _buyerRepository.FindByIdAsync(order.GetBuyerId.Value.ToString());
+
+        var integrationEvent = new OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent(order.Id, order.OrderStatus.Name, buyer.Name, order.Balance);
+
+        await _orderingIntegrationEventService.AddAndSaveEventAsync(integrationEvent);
+    }
+}
\ No newline at end of file
Index: src/Services/Basket/Basket.API/Controllers/BasketController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Basket/Basket.API/Controllers/BasketController.cs b/src/Services/Basket/Basket.API/Controllers/BasketController.cs
--- a/src/Services/Basket/Basket.API/Controllers/BasketController.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Basket/Basket.API/Controllers/BasketController.cs	(date 1673044629089)
@@ -58,9 +58,24 @@
 
         var userName = this.HttpContext.User.FindFirst(x => x.Type == ClaimTypes.Name).Value;
 
-        var eventMessage = new UserCheckoutAcceptedIntegrationEvent(userId, userName, basketCheckout.City, basketCheckout.Street,
-            basketCheckout.State, basketCheckout.Country, basketCheckout.ZipCode, basketCheckout.CardNumber, basketCheckout.CardHolderName,
-            basketCheckout.CardExpiration, basketCheckout.CardSecurityNumber, basketCheckout.CardTypeId, basketCheckout.Buyer, basketCheckout.RequestId, basket);
+        var eventMessage = new UserCheckoutAcceptedIntegrationEvent(
+            userId, 
+            userName, 
+            basketCheckout.City, 
+            basketCheckout.Street,
+            basketCheckout.State, 
+            basketCheckout.Country, 
+            basketCheckout.ZipCode, 
+            basketCheckout.CardNumber, 
+            basketCheckout.CardHolderName,
+            basketCheckout.CardExpiration, 
+            basketCheckout.CardSecurityNumber, 
+            basketCheckout.CardTypeId, 
+            basketCheckout.Buyer, 
+            basketCheckout.RequestId, basket, 
+            basketCheckout.Coupon, 
+            basketCheckout.Discount, 
+            basketCheckout.Balance);
 
         // Once basket is checkout, sends an integration event to
         // ordering.api to convert basket to order and proceeds with
Index: src/Services/Identity/Identity.API/Migrations/ApplicationDbContextModelSnapshot.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/ApplicationDbContextModelSnapshot.cs b/src/Services/Identity/Identity.API/Migrations/ApplicationDbContextModelSnapshot.cs
--- a/src/Services/Identity/Identity.API/Migrations/ApplicationDbContextModelSnapshot.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Identity/Identity.API/Migrations/ApplicationDbContextModelSnapshot.cs	(date 1673369529145)
@@ -15,251 +15,202 @@
         {
 #pragma warning disable 612, 618
             modelBuilder
+                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                 .HasAnnotation("Relational:MaxIdentifierLength", 128)
-                .HasAnnotation("ProductVersion", "6.0.0")
                 .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                 {
-                    b.Property<string>("Id")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("Id");
 
                     b.Property<string>("ConcurrencyStamp")
-                        .IsConcurrencyToken()
-                        .HasColumnType("nvarchar(max)");
+                        .IsConcurrencyToken();
 
                     b.Property<string>("Name")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
                     b.Property<string>("NormalizedName")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
                     b.HasKey("Id");
 
                     b.HasIndex("NormalizedName")
                         .IsUnique()
-                        .HasDatabaseName("RoleNameIndex")
+                        .HasName("RoleNameIndex")
                         .HasFilter("[NormalizedName] IS NOT NULL");
 
-                    b.ToTable("AspNetRoles", (string)null);
+                    b.ToTable("AspNetRoles");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<string>("ClaimType")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ClaimType");
 
-                    b.Property<string>("ClaimValue")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ClaimValue");
 
                     b.Property<string>("RoleId")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(450)");
+                        .IsRequired();
 
                     b.HasKey("Id");
 
                     b.HasIndex("RoleId");
 
-                    b.ToTable("AspNetRoleClaims", (string)null);
+                    b.ToTable("AspNetRoleClaims");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<string>("ClaimType")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ClaimType");
 
-                    b.Property<string>("ClaimValue")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ClaimValue");
 
                     b.Property<string>("UserId")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(450)");
+                        .IsRequired();
 
                     b.HasKey("Id");
 
                     b.HasIndex("UserId");
 
-                    b.ToTable("AspNetUserClaims", (string)null);
+                    b.ToTable("AspNetUserClaims");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                 {
-                    b.Property<string>("LoginProvider")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("LoginProvider");
 
-                    b.Property<string>("ProviderKey")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("ProviderKey");
 
-                    b.Property<string>("ProviderDisplayName")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ProviderDisplayName");
 
                     b.Property<string>("UserId")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(450)");
+                        .IsRequired();
 
                     b.HasKey("LoginProvider", "ProviderKey");
 
                     b.HasIndex("UserId");
 
-                    b.ToTable("AspNetUserLogins", (string)null);
+                    b.ToTable("AspNetUserLogins");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                 {
-                    b.Property<string>("UserId")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("UserId");
 
-                    b.Property<string>("RoleId")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("RoleId");
 
                     b.HasKey("UserId", "RoleId");
 
                     b.HasIndex("RoleId");
 
-                    b.ToTable("AspNetUserRoles", (string)null);
+                    b.ToTable("AspNetUserRoles");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                 {
-                    b.Property<string>("UserId")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("UserId");
 
-                    b.Property<string>("LoginProvider")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("LoginProvider");
 
-                    b.Property<string>("Name")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("Name");
 
-                    b.Property<string>("Value")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("Value");
 
                     b.HasKey("UserId", "LoginProvider", "Name");
 
-                    b.ToTable("AspNetUserTokens", (string)null);
+                    b.ToTable("AspNetUserTokens");
                 });
 
             modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Identity.API.Models.ApplicationUser", b =>
                 {
-                    b.Property<string>("Id")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("Id");
 
-                    b.Property<int>("AccessFailedCount")
-                        .HasColumnType("int");
+                    b.Property<int>("AccessFailedCount");
 
                     b.Property<string>("CardHolderName")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("CardNumber")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
-                    b.Property<int>("CardType")
-                        .HasColumnType("int");
+                    b.Property<int>("CardType");
 
                     b.Property<string>("City")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("ConcurrencyStamp")
-                        .IsConcurrencyToken()
-                        .HasColumnType("nvarchar(max)");
+                        .IsConcurrencyToken();
 
                     b.Property<string>("Country")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("Email")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
-                    b.Property<bool>("EmailConfirmed")
-                        .HasColumnType("bit");
+                    b.Property<bool>("EmailConfirmed");
 
                     b.Property<string>("Expiration")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("LastName")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
-                    b.Property<bool>("LockoutEnabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("LockoutEnabled");
 
-                    b.Property<DateTimeOffset?>("LockoutEnd")
-                        .HasColumnType("datetimeoffset");
+                    b.Property<DateTimeOffset?>("LockoutEnd");
 
                     b.Property<string>("Name")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("NormalizedEmail")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
                     b.Property<string>("NormalizedUserName")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
-                    b.Property<string>("PasswordHash")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("PasswordHash");
 
-                    b.Property<string>("PhoneNumber")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("PhoneNumber");
 
-                    b.Property<bool>("PhoneNumberConfirmed")
-                        .HasColumnType("bit");
+                    b.Property<bool>("PhoneNumberConfirmed");
 
                     b.Property<string>("SecurityNumber")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
-                    b.Property<string>("SecurityStamp")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("SecurityStamp");
 
                     b.Property<string>("State")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("Street")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
-                    b.Property<bool>("TwoFactorEnabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("TwoFactorEnabled");
 
                     b.Property<string>("UserName")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
                     b.Property<string>("ZipCode")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.HasKey("Id");
 
                     b.HasIndex("NormalizedEmail")
-                        .HasDatabaseName("EmailIndex");
+                        .HasName("EmailIndex");
 
                     b.HasIndex("NormalizedUserName")
                         .IsUnique()
-                        .HasDatabaseName("UserNameIndex")
+                        .HasName("UserNameIndex")
                         .HasFilter("[NormalizedUserName] IS NOT NULL");
 
-                    b.ToTable("AspNetUsers", (string)null);
+                    b.ToTable("AspNetUsers");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
Index: src/Services/Coupon/Coupon.API/Startup.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Startup.cs b/src/Services/Coupon/Coupon.API/Startup.cs
--- a/src/Services/Coupon/Coupon.API/Startup.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/Startup.cs	(date 1673000000667)
@@ -37,6 +37,7 @@
                 .AddCustomHealthCheck(Configuration);
 
             services.AddTransient<IIntegrationEventHandler<OrderStatusChangedToAwaitingCouponValidationIntegrationEvent>, OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler>();
+            services.AddTransient<IIntegrationEventHandler<OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent>, OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler>();
             services.AddTransient<IIntegrationEventHandler<OrderStatusChangedToCancelledIntegrationEvent>, OrderStatusChangedToCancelledIntegrationEventHandler>();
 
             services.AddSingleton(sp => new ExceptionTrigger());
@@ -90,6 +91,7 @@
             var eventBus = app.ApplicationServices.GetRequiredService<IEventBus>();
 
             eventBus.Subscribe<OrderStatusChangedToAwaitingCouponValidationIntegrationEvent, IIntegrationEventHandler<OrderStatusChangedToAwaitingCouponValidationIntegrationEvent>>();
+            eventBus.Subscribe<OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent, IIntegrationEventHandler<OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent>>();
             eventBus.Subscribe<OrderStatusChangedToCancelledIntegrationEvent, IIntegrationEventHandler<OrderStatusChangedToCancelledIntegrationEvent>>();
         }
     }
Index: src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.ts b/src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.ts
--- a/src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.ts	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.ts	(date 1673043872665)
@@ -11,6 +11,7 @@
 
 import { FormGroup, FormBuilder, Validators  }      from '@angular/forms';
 import { Router }                                   from '@angular/router';
+import {IPoint} from "../../shared/models/points.model";
 
 @Component({
     selector: 'esh-orders_new .esh-orders_new .mb-5',
@@ -23,8 +24,13 @@
     errorReceived: boolean;
     order: IOrder;
     coupon: ICoupon;
-    discountCode: string;
+    point: IPoint;
+    
+    balance: number = 0;
+    discount: number;
     couponValidationMessage: string;
+    pointValidationMessage: string;
+    checkedPoints: boolean = false;
 
     constructor(private orderService: OrdersService, private basketService: BasketService, fb: FormBuilder, private router: Router) {
         // Obtain user profile information
@@ -41,7 +47,17 @@
         });
     }
 
-    ngOnInit() {
+    ngOnInit() {}
+
+    keyAgreeUsePoints(event: any) {
+        if(event.target.checked==true){
+            this.checkedPoints = true;
+            this.checkValidationPoints();
+        }
+        else{
+            this.checkedPoints = false;
+            this.point = null;
+        }
     }
 
     keyDownValidationCoupon(event: KeyboardEvent, discountCode: string) {
@@ -68,7 +84,39 @@
                 });
     }
 
+    checkValidationPoints() {
+        this.pointValidationMessage = null;
+        this.point = null;
+        this.coupon = null;
+        this.orderService
+            .checkValidationPoints()
+            .subscribe(
+                point => {
+                    this.point = point;
+                    if (this.point != null){
+                        let maxDiscountByPoints: number = this.order.total / 10;
+                        if (this.point.cash >= maxDiscountByPoints){
+                            this.discount = maxDiscountByPoints;
+                            this.balance = -(Math.round(maxDiscountByPoints * 100));
+                        } else if(maxDiscountByPoints >= this.point.cash){
+                            this.discount = this.point.cash;
+                            this.balance = -(Math.round(this.point.cash * 100));
+                        }
+                    }
+                },
+                error => {
+                    if (error.status == 404) {
+                        this.pointValidationMessage = `${error.error}!`;
+                    } else {
+                        this.pointValidationMessage = `ERROR: ${error.status} - ${error.statusText}!`;
+                    }
+                    console.log(error);
+                });
+        
+    }
+
     submitForm(value: any) {
+        
         this.order.street = this.newOrderForm.controls['street'].value;
         this.order.city = this.newOrderForm.controls['city'].value;
         this.order.state = this.newOrderForm.controls['state'].value;
@@ -78,14 +126,21 @@
         this.order.cardholdername = this.newOrderForm.controls['cardholdername'].value;
         this.order.cardexpiration = new Date(20 + this.newOrderForm.controls['expirationdate'].value.split('/')[1], this.newOrderForm.controls['expirationdate'].value.split('/')[0]);
         this.order.cardsecuritynumber = this.newOrderForm.controls['securitycode'].value;
-
-        if (this.coupon) {
+        if (this.coupon && this.checkedPoints == false) {
             console.log(`Coupon: ${this.coupon.code} (${this.coupon.discount})`);
 
             this.order.coupon = this.coupon.code;
             this.order.discount = this.coupon.discount;
         }
-
+        else {
+            if (this.checkedPoints == true) {
+                this.order.discount = this.discount;
+            }
+            else {
+                this.discount = null
+            }
+        }
+        this.order.balance = this.balance + Math.round(this.order.total);
         let basketCheckout = this.basketService.mapBasketInfoCheckout(this.order);
         this.basketService.setBasketCheckout(basketCheckout)
             .pipe(catchError((errMessage) => {
Index: src/Services/Identity/Identity.API/Migrations/20210813072445_InitialMigration.Designer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/20210813072445_InitialMigration.Designer.cs b/src/Services/Identity/Identity.API/Migrations/20190729091724_InitialMigration.Designer.cs
rename from src/Services/Identity/Identity.API/Migrations/20210813072445_InitialMigration.Designer.cs
rename to src/Services/Identity/Identity.API/Migrations/20190729091724_InitialMigration.Designer.cs
--- a/src/Services/Identity/Identity.API/Migrations/20210813072445_InitialMigration.Designer.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Identity/Identity.API/Migrations/20190729091724_InitialMigration.Designer.cs	(date 1673369529150)
@@ -10,258 +10,209 @@
 namespace Identity.API.Migrations
 {
     [DbContext(typeof(ApplicationDbContext))]
-    [Migration("20210813072445_InitialMigration")]
+    [Migration("20190729091724_InitialMigration")]
     partial class InitialMigration
     {
         protected override void BuildTargetModel(ModelBuilder modelBuilder)
         {
 #pragma warning disable 612, 618
             modelBuilder
+                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                 .HasAnnotation("Relational:MaxIdentifierLength", 128)
-                .HasAnnotation("ProductVersion", "6.0.0")
                 .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                 {
-                    b.Property<string>("Id")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("Id");
 
                     b.Property<string>("ConcurrencyStamp")
-                        .IsConcurrencyToken()
-                        .HasColumnType("nvarchar(max)");
+                        .IsConcurrencyToken();
 
                     b.Property<string>("Name")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
                     b.Property<string>("NormalizedName")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
                     b.HasKey("Id");
 
                     b.HasIndex("NormalizedName")
                         .IsUnique()
-                        .HasDatabaseName("RoleNameIndex")
+                        .HasName("RoleNameIndex")
                         .HasFilter("[NormalizedName] IS NOT NULL");
 
-                    b.ToTable("AspNetRoles", (string)null);
+                    b.ToTable("AspNetRoles");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<string>("ClaimType")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ClaimType");
 
-                    b.Property<string>("ClaimValue")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ClaimValue");
 
                     b.Property<string>("RoleId")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(450)");
+                        .IsRequired();
 
                     b.HasKey("Id");
 
                     b.HasIndex("RoleId");
 
-                    b.ToTable("AspNetRoleClaims", (string)null);
+                    b.ToTable("AspNetRoleClaims");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
-                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
-                    b.Property<string>("ClaimType")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ClaimType");
 
-                    b.Property<string>("ClaimValue")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ClaimValue");
 
                     b.Property<string>("UserId")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(450)");
+                        .IsRequired();
 
                     b.HasKey("Id");
 
                     b.HasIndex("UserId");
 
-                    b.ToTable("AspNetUserClaims", (string)null);
+                    b.ToTable("AspNetUserClaims");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                 {
-                    b.Property<string>("LoginProvider")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("LoginProvider");
 
-                    b.Property<string>("ProviderKey")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("ProviderKey");
 
-                    b.Property<string>("ProviderDisplayName")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("ProviderDisplayName");
 
                     b.Property<string>("UserId")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(450)");
+                        .IsRequired();
 
                     b.HasKey("LoginProvider", "ProviderKey");
 
                     b.HasIndex("UserId");
 
-                    b.ToTable("AspNetUserLogins", (string)null);
+                    b.ToTable("AspNetUserLogins");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                 {
-                    b.Property<string>("UserId")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("UserId");
 
-                    b.Property<string>("RoleId")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("RoleId");
 
                     b.HasKey("UserId", "RoleId");
 
                     b.HasIndex("RoleId");
 
-                    b.ToTable("AspNetUserRoles", (string)null);
+                    b.ToTable("AspNetUserRoles");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                 {
-                    b.Property<string>("UserId")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("UserId");
 
-                    b.Property<string>("LoginProvider")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("LoginProvider");
 
-                    b.Property<string>("Name")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("Name");
 
-                    b.Property<string>("Value")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("Value");
 
                     b.HasKey("UserId", "LoginProvider", "Name");
 
-                    b.ToTable("AspNetUserTokens", (string)null);
+                    b.ToTable("AspNetUserTokens");
                 });
 
             modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Identity.API.Models.ApplicationUser", b =>
                 {
-                    b.Property<string>("Id")
-                        .HasColumnType("nvarchar(450)");
+                    b.Property<string>("Id");
 
-                    b.Property<int>("AccessFailedCount")
-                        .HasColumnType("int");
+                    b.Property<int>("AccessFailedCount");
 
                     b.Property<string>("CardHolderName")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("CardNumber")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
-                    b.Property<int>("CardType")
-                        .HasColumnType("int");
+                    b.Property<int>("CardType");
 
                     b.Property<string>("City")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("ConcurrencyStamp")
-                        .IsConcurrencyToken()
-                        .HasColumnType("nvarchar(max)");
+                        .IsConcurrencyToken();
 
                     b.Property<string>("Country")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("Email")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
-                    b.Property<bool>("EmailConfirmed")
-                        .HasColumnType("bit");
+                    b.Property<bool>("EmailConfirmed");
 
                     b.Property<string>("Expiration")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("LastName")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
-                    b.Property<bool>("LockoutEnabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("LockoutEnabled");
 
-                    b.Property<DateTimeOffset?>("LockoutEnd")
-                        .HasColumnType("datetimeoffset");
+                    b.Property<DateTimeOffset?>("LockoutEnd");
 
                     b.Property<string>("Name")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("NormalizedEmail")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
                     b.Property<string>("NormalizedUserName")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
-                    b.Property<string>("PasswordHash")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("PasswordHash");
 
-                    b.Property<string>("PhoneNumber")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("PhoneNumber");
 
-                    b.Property<bool>("PhoneNumberConfirmed")
-                        .HasColumnType("bit");
+                    b.Property<bool>("PhoneNumberConfirmed");
 
                     b.Property<string>("SecurityNumber")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
-                    b.Property<string>("SecurityStamp")
-                        .HasColumnType("nvarchar(max)");
+                    b.Property<string>("SecurityStamp");
 
                     b.Property<string>("State")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.Property<string>("Street")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
-                    b.Property<bool>("TwoFactorEnabled")
-                        .HasColumnType("bit");
+                    b.Property<bool>("TwoFactorEnabled");
 
                     b.Property<string>("UserName")
-                        .HasMaxLength(256)
-                        .HasColumnType("nvarchar(256)");
+                        .HasMaxLength(256);
 
                     b.Property<string>("ZipCode")
-                        .IsRequired()
-                        .HasColumnType("nvarchar(max)");
+                        .IsRequired();
 
                     b.HasKey("Id");
 
                     b.HasIndex("NormalizedEmail")
-                        .HasDatabaseName("EmailIndex");
+                        .HasName("EmailIndex");
 
                     b.HasIndex("NormalizedUserName")
                         .IsUnique()
-                        .HasDatabaseName("UserNameIndex")
+                        .HasName("UserNameIndex")
                         .HasFilter("[NormalizedUserName] IS NOT NULL");
 
-                    b.ToTable("AspNetUsers", (string)null);
+                    b.ToTable("AspNetUsers");
                 });
 
             modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
Index: src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20210813072513_InitialMigration.Designer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20210813072513_InitialMigration.Designer.cs b/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20190729092100_InitialPersistedGrantMigration.Designer.cs
rename from src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20210813072513_InitialMigration.Designer.cs
rename to src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20190729092100_InitialPersistedGrantMigration.Designer.cs
--- a/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20210813072513_InitialMigration.Designer.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Identity/Identity.API/Migrations/PersistedGrantDb/20190729092100_InitialPersistedGrantMigration.Designer.cs	(date 1673369529063)
@@ -10,97 +10,79 @@
 namespace Identity.API.Migrations.PersistedGrantDb
 {
     [DbContext(typeof(PersistedGrantDbContext))]
-    [Migration("20210813072513_InitialMigration")]
-    partial class InitialMigration
+    [Migration("20190729092100_InitialPersistedGrantMigration")]
+    partial class InitialPersistedGrantMigration
     {
         protected override void BuildTargetModel(ModelBuilder modelBuilder)
         {
 #pragma warning disable 612, 618
             modelBuilder
+                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                 .HasAnnotation("Relational:MaxIdentifierLength", 128)
-                .HasAnnotation("ProductVersion", "6.0.0")
                 .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                 {
                     b.Property<string>("UserCode")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientId")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<DateTime>("CreationTime")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("CreationTime");
 
                     b.Property<string>("Data")
                         .IsRequired()
-                        .HasMaxLength(50000)
-                        .HasColumnType("nvarchar(max)");
+                        .HasMaxLength(50000);
 
                     b.Property<string>("DeviceCode")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<DateTime?>("Expiration")
-                        .IsRequired()
-                        .HasColumnType("datetime2");
+                        .IsRequired();
 
                     b.Property<string>("SubjectId")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.HasKey("UserCode");
 
                     b.HasIndex("DeviceCode")
                         .IsUnique();
 
-                    b.HasIndex("Expiration");
-
-                    b.ToTable("DeviceCodes", (string)null);
+                    b.ToTable("DeviceCodes");
                 });
 
             modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                 {
                     b.Property<string>("Key")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("ClientId")
                         .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
-                    b.Property<DateTime>("CreationTime")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime>("CreationTime");
 
                     b.Property<string>("Data")
                         .IsRequired()
-                        .HasMaxLength(50000)
-                        .HasColumnType("nvarchar(max)");
+                        .HasMaxLength(50000);
 
-                    b.Property<DateTime?>("Expiration")
-                        .HasColumnType("datetime2");
+                    b.Property<DateTime?>("Expiration");
 
                     b.Property<string>("SubjectId")
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
+                        .HasMaxLength(200);
 
                     b.Property<string>("Type")
                         .IsRequired()
-                        .HasMaxLength(50)
-                        .HasColumnType("nvarchar(50)");
+                        .HasMaxLength(50);
 
                     b.HasKey("Key");
 
-                    b.HasIndex("Expiration");
-
                     b.HasIndex("SubjectId", "ClientId", "Type");
 
-                    b.ToTable("PersistedGrants", (string)null);
+                    b.ToTable("PersistedGrants");
                 });
 #pragma warning restore 612, 618
         }
Index: src/Services/Ordering/Ordering.API/Enums/Operation.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Enums/Operation.cs b/src/Services/Ordering/Ordering.API/Enums/Operation.cs
new file mode 100644
--- /dev/null	(date 1672916381446)
+++ b/src/Services/Ordering/Ordering.API/Enums/Operation.cs	(date 1672916381446)
@@ -0,0 +1,7 @@
+namespace Coupon.API.Enums;
+
+public enum Operation
+{
+    Adding,
+    Subtraction
+}
\ No newline at end of file
Index: src/Services/Identity/Identity.API/Migrations/20210813072445_InitialMigration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Identity/Identity.API/Migrations/20210813072445_InitialMigration.cs b/src/Services/Identity/Identity.API/Migrations/20190729091724_InitialMigration.cs
rename from src/Services/Identity/Identity.API/Migrations/20210813072445_InitialMigration.cs
rename to src/Services/Identity/Identity.API/Migrations/20190729091724_InitialMigration.cs
--- a/src/Services/Identity/Identity.API/Migrations/20210813072445_InitialMigration.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Identity/Identity.API/Migrations/20190729091724_InitialMigration.cs	(date 1673369529069)
@@ -1,4 +1,5 @@
 using System;
+using Microsoft.EntityFrameworkCore.Metadata;
 using Microsoft.EntityFrameworkCore.Migrations;
 
 namespace Identity.API.Migrations
@@ -11,10 +12,10 @@
                 name: "AspNetRoles",
                 columns: table => new
                 {
-                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
-                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
-                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
+                    Id = table.Column<string>(nullable: false),
+                    Name = table.Column<string>(maxLength: 256, nullable: true),
+                    NormalizedName = table.Column<string>(maxLength: 256, nullable: true),
+                    ConcurrencyStamp = table.Column<string>(nullable: true)
                 },
                 constraints: table =>
                 {
@@ -25,33 +26,33 @@
                 name: "AspNetUsers",
                 columns: table => new
                 {
-                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    CardNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    SecurityNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    Expiration = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    CardHolderName = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    CardType = table.Column<int>(type: "int", nullable: false),
-                    Street = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    City = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    State = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    Country = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    ZipCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
-                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
-                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
-                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
-                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
-                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
-                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
-                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
-                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
-                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
-                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
-                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
-                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
-                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
-                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
+                    Id = table.Column<string>(nullable: false),
+                    UserName = table.Column<string>(maxLength: 256, nullable: true),
+                    NormalizedUserName = table.Column<string>(maxLength: 256, nullable: true),
+                    Email = table.Column<string>(maxLength: 256, nullable: true),
+                    NormalizedEmail = table.Column<string>(maxLength: 256, nullable: true),
+                    EmailConfirmed = table.Column<bool>(nullable: false),
+                    PasswordHash = table.Column<string>(nullable: true),
+                    SecurityStamp = table.Column<string>(nullable: true),
+                    ConcurrencyStamp = table.Column<string>(nullable: true),
+                    PhoneNumber = table.Column<string>(nullable: true),
+                    PhoneNumberConfirmed = table.Column<bool>(nullable: false),
+                    TwoFactorEnabled = table.Column<bool>(nullable: false),
+                    LockoutEnd = table.Column<DateTimeOffset>(nullable: true),
+                    LockoutEnabled = table.Column<bool>(nullable: false),
+                    AccessFailedCount = table.Column<int>(nullable: false),
+                    CardNumber = table.Column<string>(nullable: false),
+                    SecurityNumber = table.Column<string>(nullable: false),
+                    Expiration = table.Column<string>(nullable: false),
+                    CardHolderName = table.Column<string>(nullable: false),
+                    CardType = table.Column<int>(nullable: false),
+                    Street = table.Column<string>(nullable: false),
+                    City = table.Column<string>(nullable: false),
+                    State = table.Column<string>(nullable: false),
+                    Country = table.Column<string>(nullable: false),
+                    ZipCode = table.Column<string>(nullable: false),
+                    Name = table.Column<string>(nullable: false),
+                    LastName = table.Column<string>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -62,11 +63,11 @@
                 name: "AspNetRoleClaims",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
-                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    RoleId = table.Column<string>(nullable: false),
+                    ClaimType = table.Column<string>(nullable: true),
+                    ClaimValue = table.Column<string>(nullable: true)
                 },
                 constraints: table =>
                 {
@@ -83,11 +84,11 @@
                 name: "AspNetUserClaims",
                 columns: table => new
                 {
-                    Id = table.Column<int>(type: "int", nullable: false)
-                        .Annotation("SqlServer:Identity", "1, 1"),
-                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
-                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    UserId = table.Column<string>(nullable: false),
+                    ClaimType = table.Column<string>(nullable: true),
+                    ClaimValue = table.Column<string>(nullable: true)
                 },
                 constraints: table =>
                 {
@@ -104,10 +105,10 @@
                 name: "AspNetUserLogins",
                 columns: table => new
                 {
-                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
-                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
+                    LoginProvider = table.Column<string>(nullable: false),
+                    ProviderKey = table.Column<string>(nullable: false),
+                    ProviderDisplayName = table.Column<string>(nullable: true),
+                    UserId = table.Column<string>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -124,8 +125,8 @@
                 name: "AspNetUserRoles",
                 columns: table => new
                 {
-                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
+                    UserId = table.Column<string>(nullable: false),
+                    RoleId = table.Column<string>(nullable: false)
                 },
                 constraints: table =>
                 {
@@ -148,10 +149,10 @@
                 name: "AspNetUserTokens",
                 columns: table => new
                 {
-                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
-                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
+                    UserId = table.Column<string>(nullable: false),
+                    LoginProvider = table.Column<string>(nullable: false),
+                    Name = table.Column<string>(nullable: false),
+                    Value = table.Column<string>(nullable: true)
                 },
                 constraints: table =>
                 {
Index: src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommand.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommand.cs b/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommand.cs
--- a/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommand.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommand.cs	(date 1673046612307)
@@ -53,7 +53,16 @@
 
     [DataMember]
     public int CardTypeId { get; private set; }
+    
+    [DataMember]
+    public string CodeDiscount { get; private set; }
 
+    [DataMember]
+    public decimal Discount { get; private set; }
+    
+    [DataMember]
+    public int Balance { get; private set; }
+
     [DataMember]
     public IEnumerable<OrderItemDTO> OrderItems => _orderItems;
 
@@ -64,7 +73,7 @@
 
     public CreateOrderCommand(List<BasketItem> basketItems, string userId, string userName, string city, string street, string state, string country, string zipcode,
         string cardNumber, string cardHolderName, DateTime cardExpiration,
-        string cardSecurityNumber, int cardTypeId) : this()
+        string cardSecurityNumber, int cardTypeId, string codeDiscount, decimal discount, int balance) : this()
     {
         _orderItems = basketItems.ToOrderItemsDTO().ToList();
         UserId = userId;
@@ -79,6 +88,9 @@
         CardExpiration = cardExpiration;
         CardSecurityNumber = cardSecurityNumber;
         CardTypeId = cardTypeId;
+        CodeDiscount = codeDiscount;
+        Discount = discount;
+        Balance = balance;
     }
 
 
Index: src/ApiGateways/Web.Bff.Shopping/aggregator/Controllers/CouponController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ApiGateways/Web.Bff.Shopping/aggregator/Controllers/CouponController.cs b/src/ApiGateways/Web.Bff.Shopping/aggregator/Controllers/CouponController.cs
new file mode 100644
--- /dev/null	(date 1673090869217)
+++ b/src/ApiGateways/Web.Bff.Shopping/aggregator/Controllers/CouponController.cs	(date 1673090869217)
@@ -0,0 +1,82 @@
+using System;
+using System.Linq;
+using System.Net;
+using System.Text.RegularExpressions;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Authorization;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.eShopOnContainers.Web.Shopping.HttpAggregator.Models;
+using Microsoft.eShopOnContainers.Web.Shopping.HttpAggregator.Services;
+using Microsoft.Extensions.Logging;
+using Newtonsoft.Json;
+
+namespace Microsoft.eShopOnContainers.Web.Shopping.HttpAggregator.Controllers
+{
+    [Route("api/v1/[controller]")]
+    [Authorize]
+    [ApiController]
+    public class CouponController : ControllerBase
+    {
+        private static readonly Regex ExceptionRegex = new Regex(@"^.*?Exception: (.*)$", RegexOptions.IgnoreCase | RegexOptions.Multiline);
+        private readonly ICouponService _coupon;
+        private readonly ILogger<CouponController> _logger;
+
+        public CouponController(
+            ICouponService couponService,
+            ILogger<CouponController> logger)
+        {
+            _coupon = couponService;
+            _logger = logger;
+        }
+
+        [HttpGet]
+        [Route("{code}")]
+        [ProducesResponseType((int)HttpStatusCode.NotFound)]
+        [ProducesResponseType(typeof(CouponData), (int)HttpStatusCode.OK)]
+        public async Task<ActionResult<CouponData>> CheckCouponAsync(string code)
+        {
+            _logger.LogInformation("----- Getting discount coupon: {Code}", code);
+
+            var response = await _coupon.CheckCouponByCodeNumberAsync(code);
+
+            if (!response.IsSuccessStatusCode)
+            {
+                var content = await response.Content.ReadAsStringAsync();
+
+                if (string.IsNullOrWhiteSpace(content)) return StatusCode((int)response.StatusCode);
+
+                if ((int)response.StatusCode == 404)
+                {
+                    _logger.LogWarning("----- Coupon not found: {StatusCode} - Content: {Message}", (int)response.StatusCode, content);
+
+                    return StatusCode((int)response.StatusCode, content);
+                }
+
+                if (content.IndexOf('\n') > -1)
+                {
+                    var line = content.Substring(0, content.IndexOf('\n')).Trim();
+                    _logger.LogWarning("----- Error getting discount coupon: {StatusCode} ({ReasonPhrase}) - Content: {Message}", (int)response.StatusCode, response.ReasonPhrase, line);
+
+                    if (ExceptionRegex.IsMatch(line))
+                    {
+                        var message = ExceptionRegex.Match(content).Groups[1];
+                        return StatusCode((int)response.StatusCode, message);
+                    }
+                    else
+                    {
+                        return StatusCode((int)response.StatusCode, line);
+                    }
+                }
+
+
+            }
+
+            var couponResponse = await response.Content.ReadAsStringAsync();
+            var data = JsonConvert.DeserializeObject<CouponData>(couponResponse);
+
+            _logger.LogInformation("----- Received discount coupon: {Code} ({@Coupon})", code, data);
+
+            return Ok(data);
+        }
+    }
+}
Index: src/Web/WebSPA/Client/src/modules/shared/services/points.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/services/points.service.ts b/src/Web/WebSPA/Client/src/modules/shared/services/points.service.ts
new file mode 100644
--- /dev/null	(date 1673031356956)
+++ b/src/Web/WebSPA/Client/src/modules/shared/services/points.service.ts	(date 1673031356956)
@@ -0,0 +1,28 @@
+import { Injectable } from '@angular/core';
+import {Observable} from "rxjs";
+import {map, tap} from "rxjs/operators";
+import {IPoint} from "../models/points.model";
+import {DataService} from "./data.service";
+import {ConfigurationService} from "./configuration.service";
+import {ICoupon} from "../models/coupon.model";
+
+@Injectable({
+  providedIn: 'root'
+})
+export class PointsService {
+  public UserData: any;
+  private couponUrl: string = '';
+  constructor(private service: DataService, private configurationService: ConfigurationService) {
+    // this.couponUrl = this.configurationService.serverSettings.purchaseUrl;
+  }
+
+
+  getPointsByUser(userId: string): Observable<IPoint> {
+    let url = "http://localhost:5106" + "/api/v1/point/" + userId;
+    console.log(userId);
+    
+    return this.service.get(url).pipe<IPoint>(map<Response, IPoint>((response: any) => {
+      return response;
+    }));
+  }
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/Dtos/PointDto.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Dtos/PointDto.cs b/src/Services/Coupon/Coupon.API/Dtos/PointDto.cs
new file mode 100644
--- /dev/null	(date 1672830019998)
+++ b/src/Services/Coupon/Coupon.API/Dtos/PointDto.cs	(date 1672830019998)
@@ -0,0 +1,8 @@
+namespace Coupon.API.Dtos;
+
+public class PointDto
+{
+    public int NumberOfPoints { get; set; }
+
+    public double Cash { get; set; }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/Commands/StockConfirmedCommandHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Commands/StockConfirmedCommandHandler.cs b/src/Services/Ordering/Ordering.API/Application/Commands/StockConfirmedCommandHandler.cs
new file mode 100644
--- /dev/null	(date 1673005029816)
+++ b/src/Services/Ordering/Ordering.API/Application/Commands/StockConfirmedCommandHandler.cs	(date 1673005029816)
@@ -0,0 +1,60 @@
+using System.Threading;
+using System.Threading.Tasks;
+using MediatR;
+using Microsoft.eShopOnContainers.Services.Ordering.API.Application.Commands;
+using Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate;
+using Microsoft.eShopOnContainers.Services.Ordering.Infrastructure.Idempotency;
+using Microsoft.Extensions.Logging;
+
+namespace Ordering.API.Application.Commands
+{
+    // Regular CommandHandler
+    public class StockConfirmedCommandHandler : IRequestHandler<StockConfirmedCommand, bool>
+    {
+        private readonly IOrderRepository _orderRepository;
+
+        public StockConfirmedCommandHandler(IOrderRepository orderRepository)
+        {
+            _orderRepository = orderRepository;
+        }
+
+        /// <summary>
+        /// Handler which processes the command when
+        /// Stock service confirms the request
+        /// </summary>
+        /// <param name="command"></param>
+        /// <returns></returns>
+        public async Task<bool> Handle(StockConfirmedCommand command, CancellationToken cancellationToken)
+        {
+            // Simulate a work time for confirming the stock
+            await Task.Delay(10000, cancellationToken);
+
+            var orderToUpdate = await _orderRepository.GetAsync(command.OrderNumber);
+            if (orderToUpdate == null)
+            {
+                return false;
+            }
+
+            orderToUpdate.ProcessStockConfirmed();
+            return await _orderRepository.UnitOfWork.SaveEntitiesAsync(cancellationToken);
+        }
+    }
+
+
+    // Use for Idempotency in Command process
+    public class StockConfirmedIdenfifiedCommandHandler : IdentifiedCommandHandler<StockConfirmedCommand, bool>
+    {
+        public StockConfirmedIdenfifiedCommandHandler(
+            IMediator mediator,
+            IRequestManager requestManager,
+            ILogger<IdentifiedCommandHandler<StockConfirmedCommand, bool>> logger)
+            : base(mediator, requestManager, logger)
+        {
+        }
+
+        protected override bool CreateResultForDuplicateRequest()
+        {
+            return true;                // Ignore duplicate requests for processing order.
+        }
+    }
+}
Index: src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673012057866)
+++ b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs	(date 1673012057866)
@@ -0,0 +1,18 @@
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+
+namespace Ordering.SignalrHub.IntegrationEvents.Events
+{
+    public record OrderStatusChangedToValidatedIntegrationEvent : IntegrationEvent
+    {
+        public int OrderId { get; }
+        public string OrderStatus { get; }
+        public string BuyerName { get; }
+
+        public OrderStatusChangedToValidatedIntegrationEvent(int orderId, string orderStatus, string buyerName)
+        {
+            OrderId = orderId;
+            OrderStatus = orderStatus;
+            BuyerName = buyerName;
+        }
+    }
+}
Index: src/Services/Coupon/Coupon.API/IntegrationEvents/EventHandlers/OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/IntegrationEvents/EventHandlers/OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler.cs b/src/Services/Coupon/Coupon.API/IntegrationEvents/EventHandlers/OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler.cs
--- a/src/Services/Coupon/Coupon.API/IntegrationEvents/EventHandlers/OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/IntegrationEvents/EventHandlers/OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler.cs	(date 1673050044618)
@@ -2,6 +2,7 @@
 using Coupon.API.IntegrationEvents.Events;
 using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Abstractions;
 using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+using Ordering.API.Application.IntegrationEvents.Events;
 using Serilog;
 using Serilog.Context;
 
Index: src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673049575050)
+++ b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs	(date 1673049575050)
@@ -0,0 +1,13 @@
+using Coupon.API.Enums;
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+using Newtonsoft.Json;
+
+namespace Ordering.SignalrHub.IntegrationEvents.Events;
+
+public sealed record OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent : IntegrationEvent
+{
+    [JsonProperty]
+    public string UserId { get; set; }
+    [JsonProperty]
+    public int Balance { get; set; }
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/IntegrationEvents/EventHandlers/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/IntegrationEvents/EventHandlers/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler.cs b/src/Services/Coupon/Coupon.API/IntegrationEvents/EventHandlers/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673049098610)
+++ b/src/Services/Coupon/Coupon.API/IntegrationEvents/EventHandlers/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler.cs	(date 1673049098610)
@@ -0,0 +1,60 @@
+using Coupon.API.Enums;
+using Coupon.API.Infrastructure.Repositories;
+using Coupon.API.Infrastructure.Repositories.Point;
+using Coupon.API.IntegrationEvents.Events;
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Abstractions;
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+using Serilog;
+using Serilog.Context;
+
+namespace Coupon.API.IntegrationEvents.EventHandlers;
+
+public sealed class OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler : IIntegrationEventHandler<OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent>
+{
+        private readonly IPointRepository _pointRepository;
+        private readonly IEventBus _eventBus;
+
+        public OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler(IPointRepository pointRepository, IEventBus eventBus)
+        {
+            _pointRepository = pointRepository;
+            _eventBus = eventBus;
+        }
+
+        public async Task Handle(OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent @event)
+        {
+            await Task.Delay(3000);
+
+            using (LogContext.PushProperty("IntegrationEventContext", $"{@event.Id}-Coupon.API"))
+            {
+                Log.Information("----- Handling integration event: {IntegrationEventId} at {AppName} - ({@IntegrationEvent})", @event.Id, "Coupon.API", @event);
+
+                var pointIntegrationEvent = await ProcessIntegrationEventAsync(@event);
+
+                Log.Information("----- Publishing integration event: {IntegrationEventId} from {AppName} - ({@IntegrationEvent})", pointIntegrationEvent.Id, "Coupon.API", pointIntegrationEvent);
+
+                _eventBus.Publish(pointIntegrationEvent);
+            }
+        }
+
+        private async Task<IntegrationEvent> ProcessIntegrationEventAsync(OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent integrationEvent)
+        {
+            var balance = await _pointRepository.GetPointsByUserId(integrationEvent.UserId);
+            if (balance is null)
+            {
+                balance = await _pointRepository.CreatePointsBalanceByUserId(integrationEvent.UserId);
+            }
+            Log.Information("----- Balance \"{UserId}\": {@UserId}", integrationEvent.UserId, balance);
+
+            if (balance.NumberOfPoints == default && integrationEvent.Balance < 0)
+            {
+                return new BalanceUpdateRejectedIntegrationEvent(integrationEvent.UserId, integrationEvent.Balance);
+            }
+            
+            Log.Information("Updated balance: {NumberOfPoints}", integrationEvent.Balance);
+
+            await _pointRepository.AddPointsToBalanceByUser(balance.Id, integrationEvent.UserId, integrationEvent.Balance);
+            
+            
+            return new BalanceUpdateConfirmedIntegrationEvent(integrationEvent.UserId, integrationEvent.Balance);
+        }
+}
\ No newline at end of file
Index: src/Web/WebSPA/Client/src/modules/shared/shared.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/shared.module.ts b/src/Web/WebSPA/Client/src/modules/shared/shared.module.ts
--- a/src/Web/WebSPA/Client/src/modules/shared/shared.module.ts	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/shared/shared.module.ts	(date 1672867619173)
@@ -12,6 +12,7 @@
 import { ConfigurationService } from './services/configuration.service';
 import { StorageService } from './services/storage.service';
 import { SignalrService } from './services/signalr.service';
+import {PointsService} from "./services/points.service";
 
 // Components:
 import { Pager } from './components/pager/pager';
@@ -22,6 +23,7 @@
 
 // Pipes:
 import { UppercasePipe } from './pipes/uppercase.pipe';
+import { PointsComponent } from './components/points/points.component';
 
 @NgModule({
     imports: [
@@ -39,7 +41,8 @@
         Header,
         Identity,
         PageNotFoundComponent,
-        UppercasePipe
+        UppercasePipe,
+        PointsComponent
     ],
     exports: [
         // Modules
@@ -53,7 +56,8 @@
         Header,
         Identity,
         PageNotFoundComponent,
-        UppercasePipe
+        UppercasePipe,
+        PointsComponent
     ]
 })
 export class SharedModule {
@@ -67,7 +71,8 @@
                 SecurityService, 
                 ConfigurationService, 
                 StorageService,
-                SignalrService
+                SignalrService,
+                PointsService
             ]
         };
     }
Index: src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/OrderStatus.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/OrderStatus.cs b/src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/OrderStatus.cs
--- a/src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/OrderStatus.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.Domain/AggregatesModel/OrderAggregate/OrderStatus.cs	(date 1673092956308)
@@ -11,6 +11,10 @@
     public static OrderStatus Paid = new OrderStatus(4, nameof(Paid).ToLowerInvariant());
     public static OrderStatus Shipped = new OrderStatus(5, nameof(Shipped).ToLowerInvariant());
     public static OrderStatus Cancelled = new OrderStatus(6, nameof(Cancelled).ToLowerInvariant());
+    public static readonly OrderStatus Validated = new OrderStatus(7, nameof(Validated));
+    public static readonly OrderStatus AwaitingStockValidation = new OrderStatus(8, nameof(AwaitingStockValidation));
+    public static readonly OrderStatus AwaitingCouponValidation = new OrderStatus(9, nameof(AwaitingCouponValidation));
+    public static readonly OrderStatus AwaitingBalanceValidation = new OrderStatus(10, nameof(AwaitingBalanceValidation));
 
     public OrderStatus(int id, string name)
         : base(id, name)
@@ -18,7 +22,7 @@
     }
 
     public static IEnumerable<OrderStatus> List() =>
-        new[] { Submitted, AwaitingValidation, StockConfirmed, Paid, Shipped, Cancelled };
+        new[] { Submitted, AwaitingValidation, StockConfirmed, Paid, Shipped, Cancelled, AwaitingStockValidation, AwaitingCouponValidation, AwaitingBalanceValidation };
 
     public static OrderStatus FromName(string name)
     {
Index: src/Services/Ordering/Ordering.SignalrHub/Enums/Operation.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.SignalrHub/Enums/Operation.cs b/src/Services/Ordering/Ordering.SignalrHub/Enums/Operation.cs
new file mode 100644
--- /dev/null	(date 1672916381446)
+++ b/src/Services/Ordering/Ordering.SignalrHub/Enums/Operation.cs	(date 1672916381446)
@@ -0,0 +1,7 @@
+namespace Coupon.API.Enums;
+
+public enum Operation
+{
+    Adding,
+    Subtraction
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler.cs b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673001787205)
+++ b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler.cs	(date 1673001787205)
@@ -0,0 +1,39 @@
+using Microsoft.AspNetCore.SignalR;
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Abstractions;
+using Microsoft.Extensions.Logging;
+using Serilog.Context;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using Ordering.SignalrHub.IntegrationEvents.Events;
+
+namespace Ordering.SignalrHub.IntegrationEvents
+{
+    public class OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler : IIntegrationEventHandler<OrderStatusChangedToAwaitingCouponValidationIntegrationEvent>
+    {
+        private readonly IHubContext<NotificationsHub> _hubContext;
+        private readonly ILogger<OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler> _logger;
+
+        public OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler(
+            IHubContext<NotificationsHub> hubContext,
+            ILogger<OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler> logger)
+        {
+            _hubContext = hubContext ?? throw new ArgumentNullException(nameof(hubContext));
+            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
+        }
+
+
+        public async Task Handle(OrderStatusChangedToAwaitingCouponValidationIntegrationEvent @event)
+        {
+            using (LogContext.PushProperty("IntegrationEventContext", $"{@event.Id}-{Program.AppName}"))
+            {
+                _logger.LogInformation("----- Handling integration event: {IntegrationEventId} at {AppName} - ({@IntegrationEvent})", @event.Id, Program.AppName, @event);
+
+                await _hubContext.Clients
+                    .Group(@event.BuyerName)
+                    .SendAsync("UpdatedOrderState", new { OrderId = @event.OrderId, Status = @event.OrderStatus });
+            }
+        }
+    }
+}
Index: src/Web/WebSPA/Client/src/modules/shared/models/basketCheckout.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/models/basketCheckout.model.ts b/src/Web/WebSPA/Client/src/modules/shared/models/basketCheckout.model.ts
--- a/src/Web/WebSPA/Client/src/modules/shared/models/basketCheckout.model.ts	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/shared/models/basketCheckout.model.ts	(date 1673043872675)
@@ -15,4 +15,5 @@
     coupon: string;
     total: number;
     discount: number;
+    balance: number;
 }
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/Commands/CouponConfirmedCommandHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Commands/CouponConfirmedCommandHandler.cs b/src/Services/Ordering/Ordering.API/Application/Commands/CouponConfirmedCommandHandler.cs
new file mode 100644
--- /dev/null	(date 1673005146459)
+++ b/src/Services/Ordering/Ordering.API/Application/Commands/CouponConfirmedCommandHandler.cs	(date 1673005146459)
@@ -0,0 +1,50 @@
+using System.Threading;
+using System.Threading.Tasks;
+using MediatR;
+using Microsoft.eShopOnContainers.Services.Ordering.API.Application.Commands;
+using Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate;
+using Microsoft.eShopOnContainers.Services.Ordering.Infrastructure.Idempotency;
+using Microsoft.Extensions.Logging;
+
+namespace Ordering.API.Application.Commands
+{
+    public class CouponConfirmedCommandHandler : IRequestHandler<CouponConfirmedCommand, bool>
+    {
+        private readonly IOrderRepository _orderRepository;
+
+        public CouponConfirmedCommandHandler(IOrderRepository orderRepository)
+        {
+            _orderRepository = orderRepository;
+        }
+
+        public async Task<bool> Handle(CouponConfirmedCommand command, CancellationToken cancellationToken)
+        {
+            var orderToUpdate = await _orderRepository.GetAsync(command.OrderNumber);
+
+            if (orderToUpdate == null)
+            {
+                return false;
+            }
+
+            orderToUpdate.ProcessCouponConfirmed();
+
+            return await _orderRepository.UnitOfWork.SaveEntitiesAsync(cancellationToken);
+        }
+    }
+
+    public class CouponConfirmIdenfifiedCommandHandler : IdentifiedCommandHandler<CouponConfirmedCommand, bool>
+    {
+        public CouponConfirmIdenfifiedCommandHandler(
+            IMediator mediator,
+            IRequestManager requestManager,
+            ILogger<IdentifiedCommandHandler<CouponConfirmedCommand, bool>> logger)
+            : base(mediator, requestManager, logger)
+        {
+        }
+
+        protected override bool CreateResultForDuplicateRequest()
+        {
+            return true;                // Ignore duplicate requests for processing order.
+        }
+    }
+}
Index: src/Services/Coupon/Coupon.API/Enums/Operation.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Enums/Operation.cs b/src/Services/Coupon/Coupon.API/Enums/Operation.cs
new file mode 100644
--- /dev/null	(date 1672916381446)
+++ b/src/Services/Coupon/Coupon.API/Enums/Operation.cs	(date 1672916381446)
@@ -0,0 +1,7 @@
+namespace Coupon.API.Enums;
+
+public enum Operation
+{
+    Adding,
+    Subtraction
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderCouponRejectedIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderCouponRejectedIntegrationEventHandler.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderCouponRejectedIntegrationEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673093306117)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderCouponRejectedIntegrationEventHandler.cs	(date 1673093306117)
@@ -0,0 +1,42 @@
+namespace Ordering.API.Application.IntegrationEvents.EventHandling
+{
+    using System.Threading.Tasks;
+    using MediatR;
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Abstractions;
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Extensions;
+    using Microsoft.eShopOnContainers.Services.Ordering.API;
+    using Ordering.API.Application.Commands;
+    using Ordering.API.Application.IntegrationEvents.Events;
+    using Serilog;
+    using Serilog.Context;
+
+    public class OrderCouponRejectedIntegrationEventHandler : IIntegrationEventHandler<OrderCouponRejectedIntegrationEvent>
+    {
+        private readonly IMediator _mediator;
+
+        public OrderCouponRejectedIntegrationEventHandler(IMediator mediator)
+        {
+            _mediator = mediator;
+        }
+
+        public async Task Handle(OrderCouponRejectedIntegrationEvent @event)
+        {
+            using (LogContext.PushProperty("IntegrationEventContext", $"{@event.Id}-{Program.AppName}"))
+            {
+                Log.Information("----- Handling integration event: {IntegrationEventId} at {AppName} - ({@IntegrationEvent})", @event.Id, Program.AppName, @event);
+
+                Log.Warning("Discount failed, cancelling order {OrderId}", @event.OrderId);
+
+                var command = new CancelOrderCommand(@event.OrderId);
+
+                Log.Information("----- Sending command: {CommandName} - {IdProperty}: {CommandId} ({@Command})",
+                    command.GetGenericTypeName(),
+                    nameof(command.OrderNumber),
+                    command.OrderNumber,
+                    command);
+
+                await _mediator.Send(command);
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderBalanceRejectedIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderBalanceRejectedIntegrationEventHandler.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderBalanceRejectedIntegrationEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673093517901)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderBalanceRejectedIntegrationEventHandler.cs	(date 1673093517901)
@@ -0,0 +1,33 @@
+using Ordering.API.Application.IntegrationEvents.Events;
+
+namespace Ordering.API.Application.IntegrationEvents.EventHandling;
+
+public class OrderBalanceRejectedIntegrationEventHandler : IIntegrationEventHandler<OrderBalanceRejectedIntegrationEvent>
+{
+    private readonly IMediator _mediator;
+
+    public OrderBalanceRejectedIntegrationEventHandler(IMediator mediator)
+    {
+        _mediator = mediator;
+    }
+
+    public async Task Handle(OrderBalanceRejectedIntegrationEvent @event)
+    {
+        using (LogContext.PushProperty("IntegrationEventContext", $"{@event.Id}-{Program.AppName}"))
+        {
+            Log.Information("----- Handling integration event: {IntegrationEventId} at {AppName} - ({@IntegrationEvent})", @event.Id, Program.AppName, @event);
+
+            Log.Warning("Discount failed, cancelling order {OrderId}", @event.OrderId);
+
+            var command = new CancelOrderCommand(@event.OrderId);
+
+            Log.Information("----- Sending command: {CommandName} - {IdProperty}: {CommandId} ({@Command})",
+                command.GetGenericTypeName(),
+                nameof(command.OrderNumber),
+                command.OrderNumber,
+                command);
+
+            await _mediator.Send(command);
+        }
+    }
+}
\ No newline at end of file
Index: src/Services/Payment/Payment.API/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Payment/Payment.API/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs b/src/Services/Payment/Payment.API/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673012401075)
+++ b/src/Services/Payment/Payment.API/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs	(date 1673012401075)
@@ -0,0 +1,14 @@
+namespace Payment.API.IntegrationEvents.Events
+{
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+    using Newtonsoft.Json;
+
+    public record OrderStatusChangedToValidatedIntegrationEvent : IntegrationEvent
+    {
+        [JsonProperty]
+        public int OrderId { get; private set; }
+
+        [JsonProperty]
+        public decimal Total { get; private set; }
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderCouponConfirmedIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderCouponConfirmedIntegrationEventHandler.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderCouponConfirmedIntegrationEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673093754843)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderCouponConfirmedIntegrationEventHandler.cs	(date 1673093754843)
@@ -0,0 +1,40 @@
+namespace Ordering.API.Application.IntegrationEvents.EventHandling
+{
+    using System.Threading.Tasks;
+    using MediatR;
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Abstractions;
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Extensions;
+    using Microsoft.eShopOnContainers.Services.Ordering.API;
+    using Ordering.API.Application.Commands;
+    using Ordering.API.Application.IntegrationEvents.Events;
+    using Serilog;
+    using Serilog.Context;
+
+    public class OrderCouponConfirmedIntegrationEventHandler : IIntegrationEventHandler<OrderCouponConfirmedIntegrationEvent>
+    {
+        private readonly IMediator _mediator;
+
+        public OrderCouponConfirmedIntegrationEventHandler(IMediator mediator)
+        {
+            _mediator = mediator;
+        }
+
+        public async Task Handle(OrderCouponConfirmedIntegrationEvent @event)
+        {
+            using (LogContext.PushProperty("IntegrationEventContext", $"{@event.Id}-{Program.AppName}"))
+            {
+                Log.Information("----- Handling integration event: {IntegrationEventId} at {AppName} - ({@IntegrationEvent})", @event.Id, Program.AppName, @event);
+
+                var command = new CouponConfirmedCommand(@event.OrderId, @event.Discount);
+
+                Log.Information("----- Sending command: {CommandName} - {IdProperty}: {CommandId} ({@Command})",
+                    command.GetGenericTypeName(),
+                    nameof(command.OrderNumber),
+                    command.OrderNumber,
+                    command);
+
+                await _mediator.Send(command);
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderBalanceConfirmedIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderBalanceConfirmedIntegrationEventHandler.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderBalanceConfirmedIntegrationEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673093877062)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/OrderBalanceConfirmedIntegrationEventHandler.cs	(date 1673093877062)
@@ -0,0 +1,32 @@
+using Ordering.API.Application.Commands;
+using Ordering.API.Application.IntegrationEvents.Events;
+
+namespace Ordering.API.Application.IntegrationEvents.EventHandling;
+
+public class OrderBalanceConfirmedIntegrationEventHandler : IIntegrationEventHandler<OrderBalanceConfirmedIntegrationEvent>
+{
+    private readonly IMediator _mediator;
+
+    public OrderBalanceConfirmedIntegrationEventHandler(IMediator mediator)
+    {
+        _mediator = mediator;
+    }
+
+    public async Task Handle(OrderBalanceConfirmedIntegrationEvent @event)
+    {
+        using (LogContext.PushProperty("IntegrationEventContext", $"{@event.Id}-{Program.AppName}"))
+        {
+            Log.Information("----- Handling integration event: {IntegrationEventId} at {AppName} - ({@IntegrationEvent})", @event.Id, Program.AppName, @event);
+
+            var command = new CouponConfirmedCommand(@event.OrderId, @event.Discount);
+
+            Log.Information("----- Sending command: {CommandName} - {IdProperty}: {CommandId} ({@Command})",
+                command.GetGenericTypeName(),
+                nameof(command.OrderNumber),
+                command.OrderNumber,
+                command);
+
+            await _mediator.Send(command);
+        }
+    }
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs b/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673049098590)
+++ b/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs	(date 1673049098590)
@@ -0,0 +1,22 @@
+using Coupon.API.Enums;
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+using Newtonsoft.Json;
+
+namespace Coupon.API.IntegrationEvents.Events;
+
+public sealed record OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent : IntegrationEvent
+{
+    [JsonProperty]
+    public string UserId { get; set; }
+    [JsonProperty]
+    public int OrderId { get; private set; }
+
+    [JsonProperty]
+    public string OrderStatus { get; private set; }
+
+    [JsonProperty]
+    public string BuyerName { get; private set; }
+    
+    [JsonProperty]
+    public int Balance { get; private set; }
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/Infrastructure/PointSeed.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Infrastructure/PointSeed.cs b/src/Services/Coupon/Coupon.API/Infrastructure/PointSeed.cs
new file mode 100644
--- /dev/null	(date 1672836829186)
+++ b/src/Services/Coupon/Coupon.API/Infrastructure/PointSeed.cs	(date 1672836829186)
@@ -0,0 +1,20 @@
+using Coupon.API.Infrastructure.Models;
+using Coupon.API.Infrastructure.Repositories.Point;
+
+namespace Coupon.API.Infrastructure;
+
+public sealed class PointSeed
+{
+    public async Task SeedAsync(PointContext context)
+    {
+        if (await context.Points.EstimatedDocumentCountAsync() == 0)
+        {
+            var points = new List<Point>
+            {
+                new Point("demouser@microsoft.com", 10)
+            };
+
+            await context.Points.InsertManyAsync(points);
+        }
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommandHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommandHandler.cs b/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommandHandler.cs
--- a/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommandHandler.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Application/Commands/CreateOrderCommandHandler.cs	(date 1673048133136)
@@ -37,7 +37,9 @@
         // methods and constructor so validations, invariants and business logic 
         // make sure that consistency is preserved across the whole aggregate
         var address = new Address(message.Street, message.City, message.State, message.Country, message.ZipCode);
-        var order = new Order(message.UserId, message.UserName, address, message.CardTypeId, message.CardNumber, message.CardSecurityNumber, message.CardHolderName, message.CardExpiration);
+        var order = new Order(message.UserId, message.UserName, address, message.CardTypeId, message.CardNumber,
+            message.CardSecurityNumber, message.CardHolderName, message.CardExpiration,
+            message.CodeDiscount, message.Discount, message.Balance);
 
         foreach (var item in message.OrderItems)
         {
Index: src/Services/Coupon/Coupon.API/appsettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/appsettings.json b/src/Services/Coupon/Coupon.API/appsettings.json
--- a/src/Services/Coupon/Coupon.API/appsettings.json	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/appsettings.json	(date 1672775110708)
@@ -1,6 +1,6 @@
 {
     "ConnectionString": null,
-    "CouponMongoDatabase": "CouponDb",
+    "MongoDatabase": "CouponDb",
     "UseCustomizationData": false,
     "Serilog": {
         "SeqServerUrl": null,
Index: src/Web/WebSPA/Client/src/assets/images/dollar-bill.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/assets/images/dollar-bill.svg b/src/Web/WebSPA/Client/src/assets/images/dollar-bill.svg
new file mode 100644
--- /dev/null	(date 1672841412680)
+++ b/src/Web/WebSPA/Client/src/assets/images/dollar-bill.svg	(date 1672841412680)
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
+<svg fill="#000000" width="800px" height="800px" viewBox="-1 0 19 19" xmlns="http://www.w3.org/2000/svg" class="cf-icon-svg"><path d="M16.417 9.583A7.917 7.917 0 1 1 8.5 1.666a7.917 7.917 0 0 1 7.917 7.917zm-2.307 2.53V7.069a.318.318 0 0 0-.317-.316H3.217a.318.318 0 0 0-.317.316v5.044a.318.318 0 0 0 .317.317h10.576a.318.318 0 0 0 .317-.317zm-3.172-2.522a2.357 2.357 0 1 1-.185-.92 2.351 2.351 0 0 1 .185.92zm-1.691 1.257a.744.744 0 0 0 .372-.638.754.754 0 0 0-.187-.496 1.03 1.03 0 0 0-.284-.226 1.203 1.203 0 0 0-.297-.107 1.29 1.29 0 0 0-.272-.029 1.061 1.061 0 0 1-.176-.013.689.689 0 0 1-.187-.06.45.45 0 0 1-.147-.118.279.279 0 0 1 .098-.443.69.69 0 0 1 .564-.087l.017.003a.92.92 0 0 1 .176.062.508.508 0 0 1 .148.101.237.237 0 1 0 .336-.336.982.982 0 0 0-.289-.198 1.373 1.373 0 0 0-.27-.093l-.017-.003-.02-.005V7.85a.237.237 0 0 0-.474 0v.306a1.228 1.228 0 0 0-.424.162.783.783 0 0 0-.39.66.77.77 0 0 0 .177.483.918.918 0 0 0 .302.243 1.158 1.158 0 0 0 .322.104 1.533 1.533 0 0 0 .254.02.825.825 0 0 1 .171.018.722.722 0 0 1 .177.063.555.555 0 0 1 .148.119.283.283 0 0 1 .069.183.271.271 0 0 1-.156.24.823.823 0 0 1-.424.117 1.257 1.257 0 0 1-.183-.022.888.888 0 0 1-.172-.054.38.38 0 0 1-.142-.11.237.237 0 1 0-.36.312.845.845 0 0 0 .326.239 1.309 1.309 0 0 0 .266.081l.038.007v.313a.237.237 0 0 0 .475 0v-.316a1.252 1.252 0 0 0 .434-.17z"/></svg>
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Infrastructure/OrderingContextSeed.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/OrderingContextSeed.cs b/src/Services/Ordering/Ordering.API/Infrastructure/OrderingContextSeed.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/OrderingContextSeed.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/OrderingContextSeed.cs	(date 1673089491514)
@@ -134,7 +134,10 @@
             OrderStatus.StockConfirmed,
             OrderStatus.Paid,
             OrderStatus.Shipped,
-            OrderStatus.Cancelled
+            OrderStatus.Cancelled,
+            OrderStatus.AwaitingCouponValidation,
+            OrderStatus.AwaitingStockValidation,
+            OrderStatus.AwaitingBalanceValidation,
         };
     }
 
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170208181933_Initial.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170208181933_Initial.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170208181933_Initial.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170208181933_Initial.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170208181933_Initial.cs	(date 1673369599773)
@@ -1,6 +1,7 @@
-using Microsoft.EntityFrameworkCore.Metadata;
-using Microsoft.EntityFrameworkCore.Migrations;
 using System;
+using System.Collections.Generic;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Metadata;
 
 namespace Ordering.API.Migrations
 {
Index: src/Services/Basket/Basket.API/Model/BasketCheckout.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Basket/Basket.API/Model/BasketCheckout.cs b/src/Services/Basket/Basket.API/Model/BasketCheckout.cs
--- a/src/Services/Basket/Basket.API/Model/BasketCheckout.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Basket/Basket.API/Model/BasketCheckout.cs	(date 1673043939940)
@@ -25,4 +25,9 @@
     public string Buyer { get; set; }
 
     public Guid RequestId { get; set; }
+    
+    public string Coupon { get; set; }
+
+    public int Discount { get; set; }
+    public int Balance { get; set; }
 }
Index: src/Services/Basket/Basket.API/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Basket/Basket.API/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs b/src/Services/Basket/Basket.API/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs
--- a/src/Services/Basket/Basket.API/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Basket/Basket.API/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs	(date 1673044629080)
@@ -33,11 +33,17 @@
     public Guid RequestId { get; init; }
 
     public CustomerBasket Basket { get; }
+    
+    public string CodeDiscount { get; set; }
 
+    public int Discount { get; set; }
+
+    public int Balance { get; set; }
+
     public UserCheckoutAcceptedIntegrationEvent(string userId, string userName, string city, string street,
         string state, string country, string zipCode, string cardNumber, string cardHolderName,
         DateTime cardExpiration, string cardSecurityNumber, int cardTypeId, string buyer, Guid requestId,
-        CustomerBasket basket)
+        CustomerBasket basket, string codeDiscount, int discount, int balance)
     {
         UserId = userId;
         UserName = userName;
@@ -54,6 +60,9 @@
         Buyer = buyer;
         Basket = basket;
         RequestId = requestId;
+        CodeDiscount = codeDiscount;
+        Discount = discount;
+        Balance = balance;
     }
 
 }
Index: src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToValidatedDomainEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToValidatedDomainEvent.cs b/src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToValidatedDomainEvent.cs
new file mode 100644
--- /dev/null	(date 1673004287103)
+++ b/src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToValidatedDomainEvent.cs	(date 1673004287103)
@@ -0,0 +1,16 @@
+namespace Ordering.Domain.Events
+{
+    using MediatR;
+
+    /// <summary>
+    /// Event used when the order stock items are confirmed
+    /// </summary>
+    public class OrderStatusChangedToValidatedDomainEvent
+        : INotification
+    {
+        public int OrderId { get; }
+
+        public OrderStatusChangedToValidatedDomainEvent(int orderId)
+            => OrderId = orderId;
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/OrderingContextModelSnapshot.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/OrderingContextModelSnapshot.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/OrderingContextModelSnapshot.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/OrderingContextModelSnapshot.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/OrderingContextModelSnapshot.cs	(date 1673369599930)
@@ -15,7 +15,7 @@
         {
 #pragma warning disable 612, 618
             modelBuilder
-                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
+                .HasAnnotation("ProductVersion", "3.1.1")
                 .HasAnnotation("Relational:MaxIdentifierLength", 128)
                 .HasAnnotation("Relational:Sequence:.orderitemseq", "'orderitemseq', '', '1', '10', '', '', 'Int64', 'False'")
                 .HasAnnotation("Relational:Sequence:ordering.buyerseq", "'buyerseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
@@ -27,15 +27,18 @@
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:HiLoSequenceName", "buyerseq")
                         .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
 
                     b.Property<string>("IdentityGuid")
                         .IsRequired()
+                        .HasColumnType("nvarchar(200)")
                         .HasMaxLength(200);
 
-                    b.Property<string>("Name");
+                    b.Property<string>("Name")
+                        .HasColumnType("nvarchar(max)");
 
                     b.HasKey("Id");
 
@@ -48,10 +51,12 @@
             modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.CardType", b =>
                 {
                     b.Property<int>("Id")
+                        .HasColumnType("int")
                         .HasDefaultValue(1);
 
                     b.Property<string>("Name")
                         .IsRequired()
+                        .HasColumnType("nvarchar(200)")
                         .HasMaxLength(200);
 
                     b.HasKey("Id");
@@ -63,33 +68,46 @@
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:HiLoSequenceName", "paymentseq")
                         .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
 
-                    b.Property<string>("Alias")
+                    b.Property<int>("BuyerId")
+                        .HasColumnType("int");
+
+                    b.Property<string>("_alias")
                         .IsRequired()
+                        .HasColumnName("Alias")
+                        .HasColumnType("nvarchar(200)")
                         .HasMaxLength(200);
 
-                    b.Property<int>("BuyerId");
-
-                    b.Property<string>("CardHolderName")
+                    b.Property<string>("_cardHolderName")
                         .IsRequired()
+                        .HasColumnName("CardHolderName")
+                        .HasColumnType("nvarchar(200)")
                         .HasMaxLength(200);
 
-                    b.Property<string>("CardNumber")
+                    b.Property<string>("_cardNumber")
                         .IsRequired()
+                        .HasColumnName("CardNumber")
+                        .HasColumnType("nvarchar(25)")
+                        .HasMaxLength(25);
+
+                    b.Property<int>("_cardTypeId")
+                        .HasColumnName("CardTypeId")
+                        .HasColumnType("int");
+
+                    b.Property<DateTime>("_expiration")
+                        .HasColumnName("Expiration")
+                        .HasColumnType("datetime2")
                         .HasMaxLength(25);
 
-                    b.Property<int>("CardTypeId");
-
-                    b.Property<DateTime>("Expiration");
-
                     b.HasKey("Id");
 
                     b.HasIndex("BuyerId");
 
-                    b.HasIndex("CardTypeId");
+                    b.HasIndex("_cardTypeId");
 
                     b.ToTable("paymentmethods","ordering");
                 });
@@ -98,27 +116,47 @@
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:HiLoSequenceName", "orderseq")
                         .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
 
-                    b.Property<int?>("BuyerId");
+                    b.Property<string>("Description")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<decimal?>("Discount")
+                        .HasColumnType("decimal(18,2)");
 
-                    b.Property<string>("Description");
+                    b.Property<string>("DiscountCode")
+                        .HasColumnType("nvarchar(50)")
+                        .HasMaxLength(50);
 
-                    b.Property<DateTime>("OrderDate");
+                    b.Property<bool?>("DiscountConfirmed")
+                        .HasColumnType("bit");
 
-                    b.Property<int>("OrderStatusId");
+                    b.Property<int?>("_buyerId")
+                        .HasColumnName("BuyerId")
+                        .HasColumnType("int");
 
-                    b.Property<int?>("PaymentMethodId");
+                    b.Property<DateTime>("_orderDate")
+                        .HasColumnName("OrderDate")
+                        .HasColumnType("datetime2");
+
+                    b.Property<int>("_orderStatusId")
+                        .HasColumnName("OrderStatusId")
+                        .HasColumnType("int");
+
+                    b.Property<int?>("_paymentMethodId")
+                        .HasColumnName("PaymentMethodId")
+                        .HasColumnType("int");
 
                     b.HasKey("Id");
 
-                    b.HasIndex("BuyerId");
+                    b.HasIndex("_buyerId");
 
-                    b.HasIndex("OrderStatusId");
+                    b.HasIndex("_orderStatusId");
 
-                    b.HasIndex("PaymentMethodId");
+                    b.HasIndex("_paymentMethodId");
 
                     b.ToTable("orders","ordering");
                 });
@@ -127,23 +165,36 @@
                 {
                     b.Property<int>("Id")
                         .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
                         .HasAnnotation("SqlServer:HiLoSequenceName", "orderitemseq")
                         .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
 
-                    b.Property<decimal>("Discount");
+                    b.Property<int>("OrderId")
+                        .HasColumnType("int");
 
-                    b.Property<int>("OrderId");
+                    b.Property<int>("ProductId")
+                        .HasColumnType("int");
 
-                    b.Property<string>("PictureUrl");
+                    b.Property<decimal>("_discount")
+                        .HasColumnName("Discount")
+                        .HasColumnType("decimal(18,2)");
 
-                    b.Property<int>("ProductId");
+                    b.Property<string>("_pictureUrl")
+                        .HasColumnName("PictureUrl")
+                        .HasColumnType("nvarchar(max)");
 
-                    b.Property<string>("ProductName")
-                        .IsRequired();
+                    b.Property<string>("_productName")
+                        .IsRequired()
+                        .HasColumnName("ProductName")
+                        .HasColumnType("nvarchar(max)");
 
-                    b.Property<decimal>("UnitPrice");
+                    b.Property<decimal>("_unitPrice")
+                        .HasColumnName("UnitPrice")
+                        .HasColumnType("decimal(18,2)");
 
-                    b.Property<int>("Units");
+                    b.Property<int>("_units")
+                        .HasColumnName("Units")
+                        .HasColumnType("int");
 
                     b.HasKey("Id");
 
@@ -155,10 +206,12 @@
             modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderStatus", b =>
                 {
                     b.Property<int>("Id")
+                        .HasColumnType("int")
                         .HasDefaultValue(1);
 
                     b.Property<string>("Name")
                         .IsRequired()
+                        .HasColumnType("nvarchar(200)")
                         .HasMaxLength(200);
 
                     b.HasKey("Id");
@@ -169,12 +222,15 @@
             modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Infrastructure.Idempotency.ClientRequest", b =>
                 {
                     b.Property<Guid>("Id")
-                        .ValueGeneratedOnAdd();
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uniqueidentifier");
 
                     b.Property<string>("Name")
-                        .IsRequired();
+                        .IsRequired()
+                        .HasColumnType("nvarchar(max)");
 
-                    b.Property<DateTime>("Time");
+                    b.Property<DateTime>("Time")
+                        .HasColumnType("datetime2");
 
                     b.HasKey("Id");
 
@@ -191,7 +247,7 @@
 
                     b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.CardType", "CardType")
                         .WithMany()
-                        .HasForeignKey("CardTypeId")
+                        .HasForeignKey("_cardTypeId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
                 });
@@ -200,32 +256,38 @@
                 {
                     b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", null)
                         .WithMany()
-                        .HasForeignKey("BuyerId");
+                        .HasForeignKey("_buyerId");
 
                     b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderStatus", "OrderStatus")
                         .WithMany()
-                        .HasForeignKey("OrderStatusId")
+                        .HasForeignKey("_orderStatusId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
 
                     b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", null)
                         .WithMany()
-                        .HasForeignKey("PaymentMethodId")
+                        .HasForeignKey("_paymentMethodId")
                         .OnDelete(DeleteBehavior.Restrict);
 
                     b.OwnsOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Address", "Address", b1 =>
                         {
-                            b1.Property<int>("OrderId");
+                            b1.Property<int>("OrderId")
+                                .HasColumnType("int");
 
-                            b1.Property<string>("City");
+                            b1.Property<string>("City")
+                                .HasColumnType("nvarchar(max)");
 
-                            b1.Property<string>("Country");
+                            b1.Property<string>("Country")
+                                .HasColumnType("nvarchar(max)");
 
-                            b1.Property<string>("State");
+                            b1.Property<string>("State")
+                                .HasColumnType("nvarchar(max)");
 
-                            b1.Property<string>("Street");
+                            b1.Property<string>("Street")
+                                .HasColumnType("nvarchar(max)");
 
-                            b1.Property<string>("ZipCode");
+                            b1.Property<string>("ZipCode")
+                                .HasColumnType("nvarchar(max)");
 
                             b1.HasKey("OrderId");
 
Index: src/Services/Catalog/Catalog.API/Catalog.API.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Catalog/Catalog.API/Catalog.API.csproj b/src/Services/Catalog/Catalog.API/Catalog.API.csproj
--- a/src/Services/Catalog/Catalog.API/Catalog.API.csproj	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Catalog/Catalog.API/Catalog.API.csproj	(date 1673369344922)
@@ -68,10 +68,10 @@
     <PackageReference Include="Serilog.Sinks.Seq" Version="4.1.0-dev-00166" />
     <PackageReference Include="Swashbuckle.AspNetCore" Version="6.2.1" />
     <PackageReference Include="Swashbuckle.AspNetCore.Newtonsoft" Version="6.2.1" />
-    <PackageReference Include="System.Data.SqlClient" version="4.8.2"/>
+    <PackageReference Include="System.Data.SqlClient" version="4.8.2" />
     <PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="6.0.0" />
     <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="6.0.0" />
-    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="6.0.0"/>
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="6.0.0" />
   </ItemGroup>
 
   <ItemGroup>
Index: src/Services/Coupon/Coupon.API/IntegrationEvents/Events/BalanceUpdateRejectedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/BalanceUpdateRejectedIntegrationEvent.cs b/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/BalanceUpdateRejectedIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673049098626)
+++ b/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/BalanceUpdateRejectedIntegrationEvent.cs	(date 1673049098626)
@@ -0,0 +1,9 @@
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+
+namespace Coupon.API.IntegrationEvents.Events;
+
+public record BalanceUpdateRejectedIntegrationEvent(string UserId, int Balance) : IntegrationEvent
+{
+    public string UserId { get; set; } = UserId;
+    public int Balance { get; set; } = Balance;
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler.cs b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673049575025)
+++ b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler.cs	(date 1673049575025)
@@ -0,0 +1,30 @@
+using Ordering.SignalrHub.IntegrationEvents.Events;
+
+namespace Ordering.SignalrHub.IntegrationEvents.EventHandling;
+
+public class OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler : IIntegrationEventHandler<OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent>
+{
+    private readonly IHubContext<NotificationsHub> _hubContext;
+    private readonly ILogger<OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler> _logger;
+
+    public OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler(
+        IHubContext<NotificationsHub> hubContext,
+        ILogger<OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler> logger)
+    {
+        _hubContext = hubContext ?? throw new ArgumentNullException(nameof(hubContext));
+        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
+    }
+
+
+    public async Task Handle(OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent @event)
+    {
+        using (LogContext.PushProperty("IntegrationEventContext", $"{@event.Id}-{Program.AppName}"))
+        {
+            _logger.LogInformation("----- Handling integration event: {IntegrationEventId} at {AppName} - ({@IntegrationEvent})", @event.Id, Program.AppName, @event);
+
+            await _hubContext.Clients
+                .Group(@event.UserId)
+                .SendAsync("UpdatedBalanceState", new { OrderId = @event.UserId, Status = @event.Balance });
+        }
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170303085729_RequestsTable.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170303085729_RequestsTable.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170303085729_RequestsTable.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170303085729_RequestsTable.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170303085729_RequestsTable.cs	(date 1673369599827)
@@ -1,5 +1,6 @@
-using Microsoft.EntityFrameworkCore.Migrations;
 using System;
+using System.Collections.Generic;
+using Microsoft.EntityFrameworkCore.Migrations;
 
 namespace Ordering.API.Migrations
 {
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170313100034_Domain_events.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170313100034_Domain_events.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170313100034_Domain_events.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170313100034_Domain_events.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170313100034_Domain_events.cs	(date 1673369599880)
@@ -1,3 +1,5 @@
+using System;
+using System.Collections.Generic;
 using Microsoft.EntityFrameworkCore.Migrations;
 
 namespace Ordering.API.Migrations
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToAwaitingCouponValidationIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToAwaitingCouponValidationIntegrationEvent.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToAwaitingCouponValidationIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673002396026)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToAwaitingCouponValidationIntegrationEvent.cs	(date 1673002396026)
@@ -0,0 +1,23 @@
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+
+namespace Ordering.API.Application.IntegrationEvents.Events
+{
+    public record OrderStatusChangedToAwaitingCouponValidationIntegrationEvent : IntegrationEvent
+    {
+        public int OrderId { get; }
+
+        public string OrderStatus { get; }
+
+        public string BuyerName { get; }
+
+        public string Code { get; set; }
+
+        public OrderStatusChangedToAwaitingCouponValidationIntegrationEvent(int orderId, string orderStatus, string buyerName, string code)
+        {
+            OrderId = orderId;
+            OrderStatus = orderStatus;
+            BuyerName = buyerName;
+            Code = code;
+        }
+    }
+}
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20180412143935_NamePropertyInBuyer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20180412143935_NamePropertyInBuyer.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20180412143935_NamePropertyInBuyer.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20180412143935_NamePropertyInBuyer.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20180412143935_NamePropertyInBuyer.cs	(date 1673369600185)
@@ -1,4 +1,6 @@
 using Microsoft.EntityFrameworkCore.Migrations;
+using System;
+using System.Collections.Generic;
 
 namespace Ordering.API.Infrastructure.Migrations
 {
@@ -9,7 +11,7 @@
             migrationBuilder.DropForeignKey(
                 name: "FK_orderItems_orders_OrderId",
                 schema: "ordering",
-                table: "orderItems");
+                table: "orderItems");                       
 
             migrationBuilder.AddColumn<string>(
                 name: "Name",
Index: src/Services/Ordering/Ordering.API/Application/Commands/CouponConfirmedCommand.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Commands/CouponConfirmedCommand.cs b/src/Services/Ordering/Ordering.API/Application/Commands/CouponConfirmedCommand.cs
new file mode 100644
--- /dev/null	(date 1673005146464)
+++ b/src/Services/Ordering/Ordering.API/Application/Commands/CouponConfirmedCommand.cs	(date 1673005146464)
@@ -0,0 +1,21 @@
+using System.Runtime.Serialization;
+using MediatR;
+
+namespace Ordering.API.Application.Commands
+{
+    public class CouponConfirmedCommand : IRequest<bool>
+    {
+
+        [DataMember]
+        public int OrderNumber { get; private set; }
+
+        [DataMember]
+        public int Discount { get; private set; }
+
+        public CouponConfirmedCommand(int orderNumber, int discount)
+        {
+            OrderNumber = orderNumber;
+            Discount = discount;
+        }
+    }
+}
\ No newline at end of file
Index: src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.ts b/src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.ts
--- a/src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.ts	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.ts	(date 1672867619152)
@@ -1,7 +1,6 @@
-import { Component, OnInit, OnChanges, Output, Input, EventEmitter } from '@angular/core';
+import { Component, OnInit } from '@angular/core';
 import { Subscription } from 'rxjs';
 
-import { IIdentity } from '../../models/identity.model';
 import { SecurityService } from '../../services/security.service';
 import { SignalrService } from '../../services/signalr.service';
 
@@ -14,7 +13,6 @@
     authenticated: boolean = false;
     private subscription: Subscription;
     private userName: string = '';
-
     constructor(private service: SecurityService, private signalrService: SignalrService) {
 
     }
Index: src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToAwaitingCouponValidationDomainEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToAwaitingCouponValidationDomainEvent.cs b/src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToAwaitingCouponValidationDomainEvent.cs
new file mode 100644
--- /dev/null	(date 1673002259963)
+++ b/src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToAwaitingCouponValidationDomainEvent.cs	(date 1673002259963)
@@ -0,0 +1,17 @@
+namespace Ordering.Domain.Events
+{
+    using MediatR;
+
+    public class OrderStatusChangedToAwaitingCouponValidationDomainEvent : INotification
+    {
+        public int OrderId { get; }
+
+        public string Code { get; set; }
+
+        public OrderStatusChangedToAwaitingCouponValidationDomainEvent(int orderId, string code)
+        {
+            OrderId = orderId;
+            Code = code;
+        }
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170511112333_AddOrderDescription.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170511112333_AddOrderDescription.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170511112333_AddOrderDescription.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170511112333_AddOrderDescription.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170511112333_AddOrderDescription.cs	(date 1673369600040)
@@ -1,3 +1,5 @@
+using System;
+using System.Collections.Generic;
 using Microsoft.EntityFrameworkCore.Migrations;
 
 namespace Ordering.API.Migrations
Index: src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/PointContext.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/PointContext.cs b/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/PointContext.cs
new file mode 100644
--- /dev/null	(date 1672774857690)
+++ b/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/PointContext.cs	(date 1672774857690)
@@ -0,0 +1,24 @@
+using Coupon.API.Interfaces;
+using Microsoft.Extensions.Options;
+using MongoDB.Driver;
+
+namespace Coupon.API.Infrastructure.Repositories.Point;
+
+public sealed class PointContext
+{
+    private readonly IMongoDatabase? _database;
+
+    public PointContext(IOptions<PointSettings> settings)
+    {
+        var client = new MongoClient(settings.Value.ConnectionString);
+
+        if (client is null)
+        {
+            throw new MongoConfigurationException("Cannot connect to the database. The connection string is not valid or the database is not accessible");
+        }
+
+        _database = client.GetDatabase(settings.Value.MongoDatabase);
+    }
+    
+    public IMongoCollection<Models.Point>? Points => _database?.GetCollection<Models.Point>("PointCollection");
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170713111342_AdressAsValueObject.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170713111342_AdressAsValueObject.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170713111342_AdressAsValueObject.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170713111342_AdressAsValueObject.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170713111342_AdressAsValueObject.cs	(date 1673369600118)
@@ -1,5 +1,7 @@
 using Microsoft.EntityFrameworkCore.Metadata;
 using Microsoft.EntityFrameworkCore.Migrations;
+using System;
+using System.Collections.Generic;
 
 namespace Ordering.API.Migrations
 {
Index: src/Services/Ordering/Ordering.API/Application/Commands/BalanceConfirmedCommand.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Commands/BalanceConfirmedCommand.cs b/src/Services/Ordering/Ordering.API/Application/Commands/BalanceConfirmedCommand.cs
new file mode 100644
--- /dev/null	(date 1673005858770)
+++ b/src/Services/Ordering/Ordering.API/Application/Commands/BalanceConfirmedCommand.cs	(date 1673005858770)
@@ -0,0 +1,20 @@
+namespace Ordering.API.Application.Commands;
+
+public class BalanceConfirmedCommand : IRequest<bool>
+{
+    [DataMember]
+    public int OrderNumber { get; private set; }
+    
+    [DataMember]
+    public string UserId { get; private set; }
+
+    [DataMember]
+    public int NumberOfPoints { get; private set; }
+
+    public BalanceConfirmedCommand(int orderNumber, string userId, int numberOfPoints)
+    {
+        OrderNumber = orderNumber;
+        UserId = userId;
+        NumberOfPoints = numberOfPoints;
+    }
+}
\ No newline at end of file
Index: src/Web/WebSPA/Client/src/modules/orders/orders.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/orders/orders.service.ts b/src/Web/WebSPA/Client/src/modules/orders/orders.service.ts
--- a/src/Web/WebSPA/Client/src/modules/orders/orders.service.ts	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/orders/orders.service.ts	(date 1673040919194)
@@ -11,12 +11,18 @@
 import { Observable } from 'rxjs';
 import { tap, map } from 'rxjs/operators';
 import { ICoupon } from '../shared/models/coupon.model';
+import {IPoint} from "../shared/models/points.model";
+import {PointsService} from "../shared/services/points.service";
 
 @Injectable()
 export class OrdersService {
     private ordersUrl: string = '';
 
-    constructor(private service: DataService, private basketService: BasketWrapperService, private identityService: SecurityService, private configurationService: ConfigurationService) {
+    constructor(private service: DataService, 
+                private basketService: BasketWrapperService, 
+                private identityService: SecurityService, 
+                private configurationService: ConfigurationService,
+                private pointService: PointsService) {
         if (this.configurationService.isReady)
             this.ordersUrl = this.configurationService.serverSettings.purchaseUrl;
         else
@@ -56,6 +62,10 @@
             return response;
         }));
     }
+    
+    checkValidationPoints() : Observable<IPoint>{
+        return this.pointService.getPointsByUser(this.identityService.UserData.email);
+    }
 
     mapOrderAndIdentityInfoNewOrder(): IOrder {
         let order = <IOrder>{};
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200317130640_AddCouponCodeMigration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200317130640_AddCouponCodeMigration.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200317130640_AddCouponCodeMigration.cs
new file mode 100644
--- /dev/null	(date 1673369600464)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200317130640_AddCouponCodeMigration.cs	(date 1673369600464)
@@ -0,0 +1,44 @@
+using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace Ordering.API.Infrastructure.Migrations
+{
+    public partial class AddCouponCodeMigration : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.AlterColumn<int>(
+                name: "Discount",
+                schema: "ordering",
+                table: "orders",
+                nullable: true,
+                oldClrType: typeof(int),
+                oldType: "int",
+                oldDefaultValue: 0);
+
+            migrationBuilder.AddColumn<string>(
+                name: "DiscountCode",
+                schema: "ordering",
+                table: "orders",
+                maxLength: 50,
+                nullable: true);
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropColumn(
+                name: "DiscountCode",
+                schema: "ordering",
+                table: "orders");
+
+            migrationBuilder.AlterColumn<int>(
+                name: "Discount",
+                schema: "ordering",
+                table: "orders",
+                type: "int",
+                nullable: false,
+                defaultValue: 0,
+                oldClrType: typeof(int),
+                oldNullable: true);
+        }
+    }
+}
Index: src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderCoupon/OrderStatusChangedToAwaitingCouponValidationDomainEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderCoupon/OrderStatusChangedToAwaitingCouponValidationDomainEventHandler.cs b/src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderCoupon/OrderStatusChangedToAwaitingCouponValidationDomainEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673002192870)
+++ b/src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderCoupon/OrderStatusChangedToAwaitingCouponValidationDomainEventHandler.cs	(date 1673002192870)
@@ -0,0 +1,46 @@
+using System;
+using System.Threading;
+using System.Threading.Tasks;
+using MediatR;
+using Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate;
+using Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate;
+using Microsoft.Extensions.Logging;
+using Ordering.API.Application.IntegrationEvents;
+using Ordering.API.Application.IntegrationEvents.Events;
+using Ordering.Domain.Events;
+
+namespace Ordering.API.Application.DomainEventHandlers.OrderCoupon
+{
+    public class OrderStatusChangedToAwaitingCouponValidationDomainEventHandler : INotificationHandler<OrderStatusChangedToAwaitingCouponValidationDomainEvent>
+    {
+        private readonly IOrderRepository _orderRepository;
+        private readonly IBuyerRepository _buyerRepository;
+        private readonly ILoggerFactory _logger;
+        private readonly IOrderingIntegrationEventService _orderingIntegrationEventService;
+
+        public OrderStatusChangedToAwaitingCouponValidationDomainEventHandler(
+            IOrderRepository orderRepository,
+            IBuyerRepository buyerRepository,
+            ILoggerFactory logger,
+            IOrderingIntegrationEventService orderingIntegrationEventService)
+        {
+            _orderRepository = orderRepository ?? throw new ArgumentNullException(nameof(orderRepository));
+            _buyerRepository = buyerRepository ?? throw new ArgumentNullException(nameof(buyerRepository));
+            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
+            _orderingIntegrationEventService = orderingIntegrationEventService;
+        }
+
+        public async Task Handle(OrderStatusChangedToAwaitingCouponValidationDomainEvent domainEvent, CancellationToken cancellationToken)
+        {
+            _logger.CreateLogger<OrderStatusChangedToAwaitingCouponValidationDomainEventHandler>()
+                .LogTrace("Order with Id: {OrderId} has been successfully updated to status {Status} ({Id})", domainEvent.OrderId, nameof(OrderStatus.Validated), OrderStatus.Validated.Id);
+
+            var order = await _orderRepository.GetAsync(domainEvent.OrderId);
+            var buyer = await _buyerRepository.FindByIdAsync(order.GetBuyerId.Value.ToString());
+
+            var integrationEvent = new OrderStatusChangedToAwaitingCouponValidationIntegrationEvent(order.Id, order.OrderStatus.Name, buyer.Name, order.DiscountCode);
+
+            await _orderingIntegrationEventService.AddAndSaveEventAsync(integrationEvent);
+        }
+    }
+}
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20190808132242_Change_Relation_Of_Orders.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20190808132242_Change_Relation_Of_Orders.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20190808132242_Change_Relation_Of_Orders.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20190808132242_Change_Relation_Of_Orders.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20190808132242_Change_Relation_Of_Orders.cs	(date 1673369600522)
@@ -10,7 +10,7 @@
 
         protected override void Down(MigrationBuilder migrationBuilder)
         {
-
+           
         }
     }
 }
Index: src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/IPointRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/IPointRepository.cs b/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/IPointRepository.cs
new file mode 100644
--- /dev/null	(date 1673049013297)
+++ b/src/Services/Coupon/Coupon.API/Infrastructure/Repositories/Point/IPointRepository.cs	(date 1673049013297)
@@ -0,0 +1,10 @@
+namespace Coupon.API.Infrastructure.Repositories.Point;
+
+public interface IPointRepository
+{
+    Task<Models.Point> GetPointsByUserId(string userId);
+    Task<Models.Point> CreatePointsBalanceByUserId(string userId);
+    // Task UpdatePointsAfterOrderingByUser(string userId, double balance);
+    Task AddPointsToBalanceByUser(string id, string userId, int balance);
+    Task SubtractPointsFromBalanceByUser(string id, string userId, int points);
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/IntegrationEvents/Events/OrderCouponRejectedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/OrderCouponRejectedIntegrationEvent.cs b/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/OrderCouponRejectedIntegrationEvent.cs
--- a/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/OrderCouponRejectedIntegrationEvent.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/OrderCouponRejectedIntegrationEvent.cs	(date 1673050044608)
@@ -1,17 +1,14 @@
-using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+namespace Ordering.API.Application.IntegrationEvents.Events
+{
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+    using Newtonsoft.Json;
 
-namespace Coupon.API.IntegrationEvents.Events
-{
-    public record OrderCouponRejectedIntegrationEvent : IntegrationEvent
+    public record OrderCouponRejectedIntegrationEvent(int IntegrationEventOrderId, string CouponCode) : IntegrationEvent
     {
-        public int OrderId { get; }
+        [JsonProperty]
+        public int OrderId { get; private set; }
 
-        public string Code { get; }
-
-        public OrderCouponRejectedIntegrationEvent(int orderId, string code)
-        {
-            OrderId = orderId;
-            Code = code;
-        }
+        [JsonProperty]
+        public string Code { get; private set; }
     }
-}
+}
\ No newline at end of file
Index: src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.scss b/src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.scss
new file mode 100644
--- /dev/null	(date 1672872367642)
+++ b/src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.scss	(date 1672872367642)
@@ -0,0 +1,53 @@
+@import 'src/styles/variables';
+
+.esh-points {
+  position: relative;
+
+  &-section {
+    width: 100%;
+    margin-right: 15px;
+  }
+
+  &-name {
+    font-size: $font-size-s;
+    display: inline-block;
+
+    &--upper {
+      text-transform: uppercase;
+    }
+  }
+
+  &-image {
+    height: auto;
+    width: 1.5rem;
+  }
+
+  &-drop {
+    background: $color-brightest;
+    height: 0;
+    min-width: 10rem;
+    overflow: hidden;
+    position: absolute;
+    right: 0;
+    top: 2.5rem;
+    transition: height $animation-speed-default;
+  }
+
+  &:hover &-drop {
+    height: 5rem;
+  }
+
+  &-item {
+    color: $color-primary;
+    cursor: pointer;
+    font-size: $font-size-s;
+    line-height: 2.5rem;
+    padding: 0 1rem;
+    transition: all $animation-speed-default;
+
+    &:hover {
+      background-color: $color-secondary-brightest;
+      color: $color-secondary;
+    }
+  }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170403082405_NoBuyerPropertyInOrder.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170403082405_NoBuyerPropertyInOrder.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170403082405_NoBuyerPropertyInOrder.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170403082405_NoBuyerPropertyInOrder.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170403082405_NoBuyerPropertyInOrder.cs	(date 1673369600399)
@@ -1,3 +1,5 @@
+using System;
+using System.Collections.Generic;
 using Microsoft.EntityFrameworkCore.Migrations;
 
 namespace Ordering.API.Migrations
Index: src/Services/Coupon/Coupon.API/Dtos/PointMapper.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Dtos/PointMapper.cs b/src/Services/Coupon/Coupon.API/Dtos/PointMapper.cs
new file mode 100644
--- /dev/null	(date 1672832316814)
+++ b/src/Services/Coupon/Coupon.API/Dtos/PointMapper.cs	(date 1672832316814)
@@ -0,0 +1,16 @@
+using Coupon.API.Infrastructure.Models;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+
+namespace Coupon.API.Dtos;
+
+public class PointMapper : IMapper<PointDto, Point>
+{
+    public PointDto Translate(Point entity)
+    {
+        return new PointDto
+        {
+            NumberOfPoints = entity.NumberOfPoints,
+            Cash = entity.Cash
+        };
+    }
+}
\ No newline at end of file
Index: src/ApiGateways/Web.Bff.Shopping/aggregator/appsettings.localhost.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ApiGateways/Web.Bff.Shopping/aggregator/appsettings.localhost.json b/src/ApiGateways/Web.Bff.Shopping/aggregator/appsettings.localhost.json
--- a/src/ApiGateways/Web.Bff.Shopping/aggregator/appsettings.localhost.json	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/ApiGateways/Web.Bff.Shopping/aggregator/appsettings.localhost.json	(date 1673095264527)
@@ -6,6 +6,7 @@
     "identity": "http://localhost:55105",
     "grpcBasket": "http://localhost:5580",
     "grpcCatalog": "http://localhost:81",
-    "grpcOrdering": "http://localhost:5581"
+    "grpcOrdering": "http://localhost:5581",
+    "coupon": "http://localhost:5106"
   }
 }
Index: src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToValidatedIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToValidatedIntegrationEventHandler.cs b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToValidatedIntegrationEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673013027974)
+++ b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/EventHandling/OrderStatusChangedToValidatedIntegrationEventHandler.cs	(date 1673013027974)
@@ -0,0 +1,40 @@
+using Microsoft.AspNetCore.SignalR;
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Abstractions;
+using Microsoft.Extensions.Logging;
+using Ordering.SignalrHub.IntegrationEvents.Events;
+using Serilog.Context;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+
+namespace Ordering.SignalrHub.IntegrationEvents.EventHandling
+{
+    public class OrderStatusChangedToValidatedIntegrationEventHandler :
+        IIntegrationEventHandler<OrderStatusChangedToValidatedIntegrationEvent>
+    {
+        private readonly IHubContext<NotificationsHub> _hubContext;
+        private readonly ILogger<OrderStatusChangedToValidatedIntegrationEventHandler> _logger;
+
+        public OrderStatusChangedToValidatedIntegrationEventHandler(
+            IHubContext<NotificationsHub> hubContext,
+            ILogger<OrderStatusChangedToValidatedIntegrationEventHandler> logger)
+        {
+            _hubContext = hubContext ?? throw new ArgumentNullException(nameof(hubContext));
+            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
+        }
+
+
+        public async Task Handle(OrderStatusChangedToValidatedIntegrationEvent @event)
+        {
+            using (LogContext.PushProperty("IntegrationEventContext", $"{@event.Id}-{Program.AppName}"))
+            {
+                _logger.LogInformation("----- Handling integration event: {IntegrationEventId} at {AppName} - ({@IntegrationEvent})", @event.Id, Program.AppName, @event);
+
+                await _hubContext.Clients
+                    .Group(@event.BuyerName)
+                    .SendAsync("UpdatedOrderState", new { OrderId = @event.OrderId, Status = @event.OrderStatus });
+            }
+        }
+    }
+}
Index: src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.html b/src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.html
new file mode 100644
--- /dev/null	(date 1672941587558)
+++ b/src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.html	(date 1672941587558)
@@ -0,0 +1,6 @@
+<div class="esh-points">
+    <section class="esh-points-section u-cursor-pointer pt-2 pb-2" *ngIf="authenticated">
+        <img class="esh-points-image ml-2" src="assets/images/dollar-bill.svg">
+        <div class="esh-points-name">PTS {{numberOfPoints}} / ${{cash}}</div>
+    </section>
+</div>
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200302140353_AddDiscountCouponMigration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200302140353_AddDiscountCouponMigration.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200302140353_AddDiscountCouponMigration.cs
new file mode 100644
--- /dev/null	(date 1673369600578)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200302140353_AddDiscountCouponMigration.cs	(date 1673369600578)
@@ -0,0 +1,25 @@
+using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace Ordering.API.Infrastructure.Migrations
+{
+    public partial class AddDiscountCouponMigration : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.AddColumn<int>(
+                name: "Discount",
+                schema: "ordering",
+                table: "orders",
+                nullable: false,
+                defaultValue: 0);
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropColumn(
+                name: "Discount",
+                schema: "ordering",
+                table: "orders");
+        }
+    }
+}
Index: src/ApiGateways/Web.Bff.Shopping/aggregator/Models/CouponData.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ApiGateways/Web.Bff.Shopping/aggregator/Models/CouponData.cs b/src/ApiGateways/Web.Bff.Shopping/aggregator/Models/CouponData.cs
new file mode 100644
--- /dev/null	(date 1673090911745)
+++ b/src/ApiGateways/Web.Bff.Shopping/aggregator/Models/CouponData.cs	(date 1673090911745)
@@ -0,0 +1,9 @@
+namespace Microsoft.eShopOnContainers.Web.Shopping.HttpAggregator.Models
+{
+    public class CouponData
+    {
+        public int Discount { get; set; }
+
+        public string Code { get; set; }
+    }
+}
Index: src/Services/Ordering/Ordering.API/Application/Commands/StockConfirmedCommand.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/Commands/StockConfirmedCommand.cs b/src/Services/Ordering/Ordering.API/Application/Commands/StockConfirmedCommand.cs
new file mode 100644
--- /dev/null	(date 1673005052120)
+++ b/src/Services/Ordering/Ordering.API/Application/Commands/StockConfirmedCommand.cs	(date 1673005052120)
@@ -0,0 +1,17 @@
+using System.Runtime.Serialization;
+using MediatR;
+
+namespace Ordering.API.Application.Commands
+{
+    public class StockConfirmedCommand : IRequest<bool>
+    {
+
+        [DataMember]
+        public int OrderNumber { get; private set; }
+
+        public StockConfirmedCommand(int orderNumber)
+        {
+            OrderNumber = orderNumber;
+        }
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200317130640_AddCouponCodeMigration.Designer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200317130640_AddCouponCodeMigration.Designer.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200317130640_AddCouponCodeMigration.Designer.cs
new file mode 100644
--- /dev/null	(date 1673369601150)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200317130640_AddCouponCodeMigration.Designer.cs	(date 1673369601150)
@@ -0,0 +1,311 @@
+// <auto-generated />
+using System;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using Microsoft.eShopOnContainers.Services.Ordering.Infrastructure;
+
+namespace Ordering.API.Infrastructure.Migrations
+{
+    [DbContext(typeof(OrderingContext))]
+    [Migration("20200317130640_AddCouponCodeMigration")]
+    partial class AddCouponCodeMigration
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "3.1.1")
+                .HasAnnotation("Relational:MaxIdentifierLength", 128)
+                .HasAnnotation("Relational:Sequence:.orderitemseq", "'orderitemseq', '', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("Relational:Sequence:ordering.buyerseq", "'buyerseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("Relational:Sequence:ordering.orderseq", "'orderseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("Relational:Sequence:ordering.paymentseq", "'paymentseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "buyerseq")
+                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<string>("IdentityGuid")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.Property<string>("Name")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("IdentityGuid")
+                        .IsUnique();
+
+                    b.ToTable("buyers","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.CardType", b =>
+                {
+                    b.Property<int>("Id")
+                        .HasColumnType("int")
+                        .HasDefaultValue(1);
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.HasKey("Id");
+
+                    b.ToTable("cardtypes","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "paymentseq")
+                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<int>("BuyerId")
+                        .HasColumnType("int");
+
+                    b.Property<string>("_alias")
+                        .IsRequired()
+                        .HasColumnName("Alias")
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.Property<string>("_cardHolderName")
+                        .IsRequired()
+                        .HasColumnName("CardHolderName")
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.Property<string>("_cardNumber")
+                        .IsRequired()
+                        .HasColumnName("CardNumber")
+                        .HasColumnType("nvarchar(25)")
+                        .HasMaxLength(25);
+
+                    b.Property<int>("_cardTypeId")
+                        .HasColumnName("CardTypeId")
+                        .HasColumnType("int");
+
+                    b.Property<DateTime>("_expiration")
+                        .HasColumnName("Expiration")
+                        .HasColumnType("datetime2")
+                        .HasMaxLength(25);
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("BuyerId");
+
+                    b.HasIndex("_cardTypeId");
+
+                    b.ToTable("paymentmethods","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Order", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "orderseq")
+                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<string>("Description")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<int?>("Discount")
+                        .HasColumnType("int");
+
+                    b.Property<string>("DiscountCode")
+                        .HasColumnType("nvarchar(50)")
+                        .HasMaxLength(50);
+
+                    b.Property<int?>("_buyerId")
+                        .HasColumnName("BuyerId")
+                        .HasColumnType("int");
+
+                    b.Property<DateTime>("_orderDate")
+                        .HasColumnName("OrderDate")
+                        .HasColumnType("datetime2");
+
+                    b.Property<int>("_orderStatusId")
+                        .HasColumnName("OrderStatusId")
+                        .HasColumnType("int");
+
+                    b.Property<int?>("_paymentMethodId")
+                        .HasColumnName("PaymentMethodId")
+                        .HasColumnType("int");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("_buyerId");
+
+                    b.HasIndex("_orderStatusId");
+
+                    b.HasIndex("_paymentMethodId");
+
+                    b.ToTable("orders","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderItem", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "orderitemseq")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<int>("OrderId")
+                        .HasColumnType("int");
+
+                    b.Property<int>("ProductId")
+                        .HasColumnType("int");
+
+                    b.Property<decimal>("_discount")
+                        .HasColumnName("Discount")
+                        .HasColumnType("decimal(18,2)");
+
+                    b.Property<string>("_pictureUrl")
+                        .HasColumnName("PictureUrl")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<string>("_productName")
+                        .IsRequired()
+                        .HasColumnName("ProductName")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<decimal>("_unitPrice")
+                        .HasColumnName("UnitPrice")
+                        .HasColumnType("decimal(18,2)");
+
+                    b.Property<int>("_units")
+                        .HasColumnName("Units")
+                        .HasColumnType("int");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("OrderId");
+
+                    b.ToTable("orderItems","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderStatus", b =>
+                {
+                    b.Property<int>("Id")
+                        .HasColumnType("int")
+                        .HasDefaultValue(1);
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.HasKey("Id");
+
+                    b.ToTable("orderstatus","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Infrastructure.Idempotency.ClientRequest", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uniqueidentifier");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<DateTime>("Time")
+                        .HasColumnType("datetime2");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("requests","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", b =>
+                {
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", null)
+                        .WithMany("PaymentMethods")
+                        .HasForeignKey("BuyerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.CardType", "CardType")
+                        .WithMany()
+                        .HasForeignKey("_cardTypeId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Order", b =>
+                {
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", null)
+                        .WithMany()
+                        .HasForeignKey("_buyerId");
+
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderStatus", "OrderStatus")
+                        .WithMany()
+                        .HasForeignKey("_orderStatusId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", null)
+                        .WithMany()
+                        .HasForeignKey("_paymentMethodId")
+                        .OnDelete(DeleteBehavior.Restrict);
+
+                    b.OwnsOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Address", "Address", b1 =>
+                        {
+                            b1.Property<int>("OrderId")
+                                .HasColumnType("int");
+
+                            b1.Property<string>("City")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("Country")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("State")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("Street")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("ZipCode")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.HasKey("OrderId");
+
+                            b1.ToTable("orders");
+
+                            b1.WithOwner()
+                                .HasForeignKey("OrderId");
+                        });
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderItem", b =>
+                {
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Order", null)
+                        .WithMany("OrderItems")
+                        .HasForeignKey("OrderId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs
--- a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/UserCheckoutAcceptedIntegrationEvent.cs	(date 1673046179111)
@@ -31,11 +31,17 @@
     public Guid RequestId { get; set; }
 
     public CustomerBasket Basket { get; }
+    
+    public string CodeDiscount { get; set; }
 
+    public int Discount { get; set; }
+
+    public int Balance { get; set; }
+
     public UserCheckoutAcceptedIntegrationEvent(string userId, string userName, string city, string street,
         string state, string country, string zipCode, string cardNumber, string cardHolderName,
         DateTime cardExpiration, string cardSecurityNumber, int cardTypeId, string buyer, Guid requestId,
-        CustomerBasket basket)
+        CustomerBasket basket, string codeDiscount, int discount, int balance)
     {
         UserId = userId;
         City = city;
@@ -50,8 +56,10 @@
         CardTypeId = cardTypeId;
         Buyer = buyer;
         Basket = basket;
+        CodeDiscount = codeDiscount;
+        Discount = discount;
+        Balance = balance;
         RequestId = requestId;
         UserName = userName;
     }
-
 }
Index: src/Web/WebSPA/Client/src/modules/app.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/app.component.html b/src/Web/WebSPA/Client/src/modules/app.component.html
--- a/src/Web/WebSPA/Client/src/modules/app.component.html	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/app.component.html	(date 1672871076884)
@@ -10,8 +10,8 @@
                     <img class="esh-app-header-brand" src="assets/images/logo_color.svg" />
                 </a>
             </section>
-
             <section class="d-flex align-content-center justify-content-between">
+                <esh-points></esh-points>
                 <esh-identity></esh-identity>
                 <esh-basket-status *ngIf="Authenticated"></esh-basket-status>
             </section>
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200318113949_AddDiscountConfirmationMigration.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200318113949_AddDiscountConfirmationMigration.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200318113949_AddDiscountConfirmationMigration.cs
new file mode 100644
--- /dev/null	(date 1673369601262)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200318113949_AddDiscountConfirmationMigration.cs	(date 1673369601262)
@@ -0,0 +1,42 @@
+using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace Ordering.API.Infrastructure.Migrations
+{
+    public partial class AddDiscountConfirmationMigration : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.AlterColumn<decimal>(
+                name: "Discount",
+                schema: "ordering",
+                table: "orders",
+                nullable: true,
+                oldClrType: typeof(int),
+                oldType: "int",
+                oldNullable: true);
+
+            migrationBuilder.AddColumn<bool>(
+                name: "DiscountConfirmed",
+                schema: "ordering",
+                table: "orders",
+                nullable: true);
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropColumn(
+                name: "DiscountConfirmed",
+                schema: "ordering",
+                table: "orders");
+
+            migrationBuilder.AlterColumn<int>(
+                name: "Discount",
+                schema: "ordering",
+                table: "orders",
+                type: "int",
+                nullable: true,
+                oldClrType: typeof(decimal),
+                oldNullable: true);
+        }
+    }
+}
Index: src/Services/Ordering/Ordering.UnitTests/Application/IdentifiedCommandHandlerTest.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.UnitTests/Application/IdentifiedCommandHandlerTest.cs b/src/Services/Ordering/Ordering.UnitTests/Application/IdentifiedCommandHandlerTest.cs
--- a/src/Services/Ordering/Ordering.UnitTests/Application/IdentifiedCommandHandlerTest.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.UnitTests/Application/IdentifiedCommandHandlerTest.cs	(date 1673048133159)
@@ -74,6 +74,9 @@
             cardExpiration: args != null && args.ContainsKey("cardExpiration") ? (DateTime)args["cardExpiration"] : DateTime.MinValue,
             cardSecurityNumber: args != null && args.ContainsKey("cardSecurityNumber") ? (string)args["cardSecurityNumber"] : "123",
             cardHolderName: args != null && args.ContainsKey("cardHolderName") ? (string)args["cardHolderName"] : "XXX",
-            cardTypeId: args != null && args.ContainsKey("cardTypeId") ? (int)args["cardTypeId"] : 0);
+            cardTypeId: args != null && args.ContainsKey("cardTypeId") ? (int)args["cardTypeId"] : 0,
+            codeDiscount: args != null && args.ContainsKey("codeDiscount") ? (string)args["codeDiscount"] : "DISC-5",
+            discount: args != null && args.ContainsKey("discount") ? (int)args["discount"] : 0,
+            balance: args != null && args.ContainsKey("balance") ? (int)args["balance"] : 0);
     }
 }
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170405110939_NoPaymentMethodPropertyInOrder.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170405110939_NoPaymentMethodPropertyInOrder.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170405110939_NoPaymentMethodPropertyInOrder.cs
--- a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170405110939_NoPaymentMethodPropertyInOrder.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20170405110939_NoPaymentMethodPropertyInOrder.cs	(date 1673369600945)
@@ -1,3 +1,5 @@
+using System;
+using System.Collections.Generic;
 using Microsoft.EntityFrameworkCore.Migrations;
 
 namespace Ordering.API.Migrations
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673012305849)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToValidatedIntegrationEvent.cs	(date 1673012305849)
@@ -0,0 +1,20 @@
+namespace Ordering.API.Application.IntegrationEvents.Events
+{
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+
+    public record OrderStatusChangedToValidatedIntegrationEvent : IntegrationEvent
+    {
+        public int OrderId { get; }
+        public string OrderStatus { get; }
+        public string BuyerName { get; }
+        public decimal Total { get; }
+
+        public OrderStatusChangedToValidatedIntegrationEvent(int orderId, string orderStatus, string buyerName, decimal total)
+        {
+            OrderId = orderId;
+            OrderStatus = orderStatus;
+            BuyerName = buyerName;
+            Total = total;
+        }
+    }
+}
\ No newline at end of file
Index: src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.html b/src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.html
--- a/src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.html	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/shared/components/identity/identity.html	(date 1672869607908)
@@ -11,7 +11,6 @@
 
     <section class="esh-identity-section u-cursor-pointer pt-2 pb-2"
          *ngIf="authenticated">
-
         <div class="esh-identity-name">{{userName}}</div>
         <img class="esh-identity-image ml-2" src="assets/images/user.svg">
     </section>
Index: src/Services/Coupon/Coupon.API/Extensions/IHostBuilderExtensions.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Extensions/IHostBuilderExtensions.cs b/src/Services/Coupon/Coupon.API/Extensions/IHostBuilderExtensions.cs
--- a/src/Services/Coupon/Coupon.API/Extensions/IHostBuilderExtensions.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/Extensions/IHostBuilderExtensions.cs	(date 1673000005574)
@@ -40,6 +40,7 @@
                 var eventBus = scope.ServiceProvider.GetRequiredService<IEventBus>();
 
                 eventBus.Subscribe<OrderStatusChangedToAwaitingCouponValidationIntegrationEvent, OrderStatusChangedToAwaitingCouponValidationIntegrationEventHandler>();
+                eventBus.Subscribe<OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent, OrderStatusChangedToAwaitingBalanceUpdateIntegrationEventHandler>();
             }
 
             return host;
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200318113949_AddDiscountConfirmationMigration.Designer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200318113949_AddDiscountConfirmationMigration.Designer.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200318113949_AddDiscountConfirmationMigration.Designer.cs
new file mode 100644
--- /dev/null	(date 1673369602346)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200318113949_AddDiscountConfirmationMigration.Designer.cs	(date 1673369602346)
@@ -0,0 +1,314 @@
+// <auto-generated />
+using System;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using Microsoft.eShopOnContainers.Services.Ordering.Infrastructure;
+
+namespace Ordering.API.Infrastructure.Migrations
+{
+    [DbContext(typeof(OrderingContext))]
+    [Migration("20200318113949_AddDiscountConfirmationMigration")]
+    partial class AddDiscountConfirmationMigration
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "3.1.1")
+                .HasAnnotation("Relational:MaxIdentifierLength", 128)
+                .HasAnnotation("Relational:Sequence:.orderitemseq", "'orderitemseq', '', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("Relational:Sequence:ordering.buyerseq", "'buyerseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("Relational:Sequence:ordering.orderseq", "'orderseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("Relational:Sequence:ordering.paymentseq", "'paymentseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "buyerseq")
+                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<string>("IdentityGuid")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.Property<string>("Name")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("IdentityGuid")
+                        .IsUnique();
+
+                    b.ToTable("buyers","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.CardType", b =>
+                {
+                    b.Property<int>("Id")
+                        .HasColumnType("int")
+                        .HasDefaultValue(1);
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.HasKey("Id");
+
+                    b.ToTable("cardtypes","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "paymentseq")
+                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<int>("BuyerId")
+                        .HasColumnType("int");
+
+                    b.Property<string>("_alias")
+                        .IsRequired()
+                        .HasColumnName("Alias")
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.Property<string>("_cardHolderName")
+                        .IsRequired()
+                        .HasColumnName("CardHolderName")
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.Property<string>("_cardNumber")
+                        .IsRequired()
+                        .HasColumnName("CardNumber")
+                        .HasColumnType("nvarchar(25)")
+                        .HasMaxLength(25);
+
+                    b.Property<int>("_cardTypeId")
+                        .HasColumnName("CardTypeId")
+                        .HasColumnType("int");
+
+                    b.Property<DateTime>("_expiration")
+                        .HasColumnName("Expiration")
+                        .HasColumnType("datetime2")
+                        .HasMaxLength(25);
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("BuyerId");
+
+                    b.HasIndex("_cardTypeId");
+
+                    b.ToTable("paymentmethods","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Order", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "orderseq")
+                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<string>("Description")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<decimal?>("Discount")
+                        .HasColumnType("decimal(18,2)");
+
+                    b.Property<string>("DiscountCode")
+                        .HasColumnType("nvarchar(50)")
+                        .HasMaxLength(50);
+
+                    b.Property<bool?>("DiscountConfirmed")
+                        .HasColumnType("bit");
+
+                    b.Property<int?>("_buyerId")
+                        .HasColumnName("BuyerId")
+                        .HasColumnType("int");
+
+                    b.Property<DateTime>("_orderDate")
+                        .HasColumnName("OrderDate")
+                        .HasColumnType("datetime2");
+
+                    b.Property<int>("_orderStatusId")
+                        .HasColumnName("OrderStatusId")
+                        .HasColumnType("int");
+
+                    b.Property<int?>("_paymentMethodId")
+                        .HasColumnName("PaymentMethodId")
+                        .HasColumnType("int");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("_buyerId");
+
+                    b.HasIndex("_orderStatusId");
+
+                    b.HasIndex("_paymentMethodId");
+
+                    b.ToTable("orders","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderItem", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "orderitemseq")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<int>("OrderId")
+                        .HasColumnType("int");
+
+                    b.Property<int>("ProductId")
+                        .HasColumnType("int");
+
+                    b.Property<decimal>("_discount")
+                        .HasColumnName("Discount")
+                        .HasColumnType("decimal(18,2)");
+
+                    b.Property<string>("_pictureUrl")
+                        .HasColumnName("PictureUrl")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<string>("_productName")
+                        .IsRequired()
+                        .HasColumnName("ProductName")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<decimal>("_unitPrice")
+                        .HasColumnName("UnitPrice")
+                        .HasColumnType("decimal(18,2)");
+
+                    b.Property<int>("_units")
+                        .HasColumnName("Units")
+                        .HasColumnType("int");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("OrderId");
+
+                    b.ToTable("orderItems","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderStatus", b =>
+                {
+                    b.Property<int>("Id")
+                        .HasColumnType("int")
+                        .HasDefaultValue(1);
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.HasKey("Id");
+
+                    b.ToTable("orderstatus","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Infrastructure.Idempotency.ClientRequest", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uniqueidentifier");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<DateTime>("Time")
+                        .HasColumnType("datetime2");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("requests","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", b =>
+                {
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", null)
+                        .WithMany("PaymentMethods")
+                        .HasForeignKey("BuyerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.CardType", "CardType")
+                        .WithMany()
+                        .HasForeignKey("_cardTypeId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Order", b =>
+                {
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", null)
+                        .WithMany()
+                        .HasForeignKey("_buyerId");
+
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderStatus", "OrderStatus")
+                        .WithMany()
+                        .HasForeignKey("_orderStatusId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", null)
+                        .WithMany()
+                        .HasForeignKey("_paymentMethodId")
+                        .OnDelete(DeleteBehavior.Restrict);
+
+                    b.OwnsOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Address", "Address", b1 =>
+                        {
+                            b1.Property<int>("OrderId")
+                                .HasColumnType("int");
+
+                            b1.Property<string>("City")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("Country")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("State")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("Street")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("ZipCode")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.HasKey("OrderId");
+
+                            b1.ToTable("orders");
+
+                            b1.WithOwner()
+                                .HasForeignKey("OrderId");
+                        });
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderItem", b =>
+                {
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Order", null)
+                        .WithMany("OrderItems")
+                        .HasForeignKey("OrderId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
Index: src/Services/Coupon/Coupon.API/Infrastructure/Models/Point.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Infrastructure/Models/Point.cs b/src/Services/Coupon/Coupon.API/Infrastructure/Models/Point.cs
new file mode 100644
--- /dev/null	(date 1672850564610)
+++ b/src/Services/Coupon/Coupon.API/Infrastructure/Models/Point.cs	(date 1672850564610)
@@ -0,0 +1,27 @@
+using MongoDB.Bson;
+using MongoDB.Bson.Serialization.Attributes;
+
+namespace Coupon.API.Infrastructure.Models;
+
+public class Point
+{
+    [BsonIgnoreIfDefault]
+    [BsonRepresentation(BsonType.ObjectId)]
+    public string Id { get; set; }
+    public string UserId { get; set; }
+    public int NumberOfPoints { get; set; }
+
+    private double _cash;
+    
+    public double Cash
+    {
+        get => (double)NumberOfPoints/100;
+        set => _cash = value;
+    }
+
+    public Point(string userId, int numberOfPoints)
+    {
+        UserId = userId;
+        NumberOfPoints = numberOfPoints;
+    }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200302140353_AddDiscountCouponMigration.Designer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200302140353_AddDiscountCouponMigration.Designer.cs b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200302140353_AddDiscountCouponMigration.Designer.cs
new file mode 100644
--- /dev/null	(date 1673369602212)
+++ b/src/Services/Ordering/Ordering.API/Infrastructure/Migrations/20200302140353_AddDiscountCouponMigration.Designer.cs	(date 1673369602212)
@@ -0,0 +1,309 @@
+// <auto-generated />
+using System;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using Microsoft.eShopOnContainers.Services.Ordering.Infrastructure;
+
+namespace Ordering.API.Infrastructure.Migrations
+{
+    [DbContext(typeof(OrderingContext))]
+    [Migration("20200302140353_AddDiscountCouponMigration")]
+    partial class AddDiscountCouponMigration
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "3.1.1")
+                .HasAnnotation("Relational:MaxIdentifierLength", 128)
+                .HasAnnotation("Relational:Sequence:.orderitemseq", "'orderitemseq', '', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("Relational:Sequence:ordering.buyerseq", "'buyerseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("Relational:Sequence:ordering.orderseq", "'orderseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("Relational:Sequence:ordering.paymentseq", "'paymentseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
+                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "buyerseq")
+                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<string>("IdentityGuid")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.Property<string>("Name")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("IdentityGuid")
+                        .IsUnique();
+
+                    b.ToTable("buyers","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.CardType", b =>
+                {
+                    b.Property<int>("Id")
+                        .HasColumnType("int")
+                        .HasDefaultValue(1);
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.HasKey("Id");
+
+                    b.ToTable("cardtypes","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "paymentseq")
+                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<int>("BuyerId")
+                        .HasColumnType("int");
+
+                    b.Property<string>("_alias")
+                        .IsRequired()
+                        .HasColumnName("Alias")
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.Property<string>("_cardHolderName")
+                        .IsRequired()
+                        .HasColumnName("CardHolderName")
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.Property<string>("_cardNumber")
+                        .IsRequired()
+                        .HasColumnName("CardNumber")
+                        .HasColumnType("nvarchar(25)")
+                        .HasMaxLength(25);
+
+                    b.Property<int>("_cardTypeId")
+                        .HasColumnName("CardTypeId")
+                        .HasColumnType("int");
+
+                    b.Property<DateTime>("_expiration")
+                        .HasColumnName("Expiration")
+                        .HasColumnType("datetime2")
+                        .HasMaxLength(25);
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("BuyerId");
+
+                    b.HasIndex("_cardTypeId");
+
+                    b.ToTable("paymentmethods","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Order", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "orderseq")
+                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<string>("Description")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<int>("Discount")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasDefaultValue(0);
+
+                    b.Property<int?>("_buyerId")
+                        .HasColumnName("BuyerId")
+                        .HasColumnType("int");
+
+                    b.Property<DateTime>("_orderDate")
+                        .HasColumnName("OrderDate")
+                        .HasColumnType("datetime2");
+
+                    b.Property<int>("_orderStatusId")
+                        .HasColumnName("OrderStatusId")
+                        .HasColumnType("int");
+
+                    b.Property<int?>("_paymentMethodId")
+                        .HasColumnName("PaymentMethodId")
+                        .HasColumnType("int");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("_buyerId");
+
+                    b.HasIndex("_orderStatusId");
+
+                    b.HasIndex("_paymentMethodId");
+
+                    b.ToTable("orders","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderItem", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("int")
+                        .HasAnnotation("SqlServer:HiLoSequenceName", "orderitemseq")
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);
+
+                    b.Property<int>("OrderId")
+                        .HasColumnType("int");
+
+                    b.Property<int>("ProductId")
+                        .HasColumnType("int");
+
+                    b.Property<decimal>("_discount")
+                        .HasColumnName("Discount")
+                        .HasColumnType("decimal(18,2)");
+
+                    b.Property<string>("_pictureUrl")
+                        .HasColumnName("PictureUrl")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<string>("_productName")
+                        .IsRequired()
+                        .HasColumnName("ProductName")
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<decimal>("_unitPrice")
+                        .HasColumnName("UnitPrice")
+                        .HasColumnType("decimal(18,2)");
+
+                    b.Property<int>("_units")
+                        .HasColumnName("Units")
+                        .HasColumnType("int");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("OrderId");
+
+                    b.ToTable("orderItems","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderStatus", b =>
+                {
+                    b.Property<int>("Id")
+                        .HasColumnType("int")
+                        .HasDefaultValue(1);
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(200)")
+                        .HasMaxLength(200);
+
+                    b.HasKey("Id");
+
+                    b.ToTable("orderstatus","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Infrastructure.Idempotency.ClientRequest", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uniqueidentifier");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("nvarchar(max)");
+
+                    b.Property<DateTime>("Time")
+                        .HasColumnType("datetime2");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("requests","ordering");
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", b =>
+                {
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", null)
+                        .WithMany("PaymentMethods")
+                        .HasForeignKey("BuyerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.CardType", "CardType")
+                        .WithMany()
+                        .HasForeignKey("_cardTypeId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Order", b =>
+                {
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.Buyer", null)
+                        .WithMany()
+                        .HasForeignKey("_buyerId");
+
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderStatus", "OrderStatus")
+                        .WithMany()
+                        .HasForeignKey("_orderStatusId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate.PaymentMethod", null)
+                        .WithMany()
+                        .HasForeignKey("_paymentMethodId")
+                        .OnDelete(DeleteBehavior.Restrict);
+
+                    b.OwnsOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Address", "Address", b1 =>
+                        {
+                            b1.Property<int>("OrderId")
+                                .HasColumnType("int");
+
+                            b1.Property<string>("City")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("Country")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("State")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("Street")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.Property<string>("ZipCode")
+                                .HasColumnType("nvarchar(max)");
+
+                            b1.HasKey("OrderId");
+
+                            b1.ToTable("orders");
+
+                            b1.WithOwner()
+                                .HasForeignKey("OrderId");
+                        });
+                });
+
+            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.OrderItem", b =>
+                {
+                    b.HasOne("Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate.Order", null)
+                        .WithMany("OrderItems")
+                        .HasForeignKey("OrderId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
Index: src/Services/Coupon/Coupon.API/Settings/PointSettings.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Settings/PointSettings.cs b/src/Services/Coupon/Coupon.API/Settings/PointSettings.cs
new file mode 100644
--- /dev/null	(date 1672774873280)
+++ b/src/Services/Coupon/Coupon.API/Settings/PointSettings.cs	(date 1672774873280)
@@ -0,0 +1,12 @@
+using Coupon.API.Interfaces;
+
+namespace Coupon.API;
+
+public class PointSettings
+{
+    public string ConnectionString { get; set; }
+    public string MongoDatabase { get; set; }
+    public string EventBusConnection { get; set; }
+    public bool UseCustomizationData { get; set; }
+    public bool AzureStorageEnabled { get; set; }
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/appsettings.Development.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/appsettings.Development.json b/src/Services/Coupon/Coupon.API/appsettings.Development.json
--- a/src/Services/Coupon/Coupon.API/appsettings.Development.json	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/appsettings.Development.json	(date 1672775115984)
@@ -1,6 +1,6 @@
 {
     "ConnectionString": "mongodb://nosqldata",
-    "CouponMongoDatabase": "CouponDb",
+    "MongoDatabase": "CouponDb",
     "Serilog": {
         "MinimumLevel": {
             "Default": "Debug",
Index: src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToAwaitingCouponValidationIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToAwaitingCouponValidationIntegrationEvent.cs b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToAwaitingCouponValidationIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673001787221)
+++ b/src/Services/Ordering/Ordering.SignalrHub/IntegrationEvents/Events/OrderStatusChangedToAwaitingCouponValidationIntegrationEvent.cs	(date 1673001787221)
@@ -0,0 +1,20 @@
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+using Newtonsoft.Json;
+
+namespace Ordering.SignalrHub.IntegrationEvents.Events
+{
+    public record OrderStatusChangedToAwaitingCouponValidationIntegrationEvent : IntegrationEvent
+    {
+        [JsonProperty]
+        public int OrderId { get; private set; }
+
+        [JsonProperty]
+        public string OrderStatus { get; private set; }
+
+        [JsonProperty]
+        public string BuyerName { get; private set; }
+
+        [JsonProperty]
+        public string Code { get; private set; }
+    }
+}
Index: src/Web/WebSPA/Client/src/modules/basket/basket.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/basket/basket.service.ts b/src/Web/WebSPA/Client/src/modules/basket/basket.service.ts
--- a/src/Web/WebSPA/Client/src/modules/basket/basket.service.ts	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/basket/basket.service.ts	(date 1673043872684)
@@ -132,6 +132,7 @@
         basketCheckout.cardholdername = order.cardholdername;
         basketCheckout.coupon = order.coupon;
         basketCheckout.discount = order.discount;
+        basketCheckout.balance = order.balance;
         basketCheckout.total = 0;
         basketCheckout.expiration = order.expiration;
 
Index: src/Services/Payment/Payment.API/Startup.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Payment/Payment.API/Startup.cs b/src/Services/Payment/Payment.API/Startup.cs
--- a/src/Services/Payment/Payment.API/Startup.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Payment/Payment.API/Startup.cs	(date 1673013200126)
@@ -1,3 +1,6 @@
+using Payment.API.IntegrationEvents.EventHandling;
+using Payment.API.IntegrationEvents.Events;
+
 namespace Microsoft.eShopOnContainers.Payment.API;
 
 public class Startup
@@ -137,12 +140,14 @@
         }
 
         services.AddTransient<OrderStatusChangedToStockConfirmedIntegrationEventHandler>();
+        services.AddTransient<OrderStatusChangedToValidatedIntegrationEventHandler>();
         services.AddSingleton<IEventBusSubscriptionsManager, InMemoryEventBusSubscriptionsManager>();
     }
 
     private void ConfigureEventBus(IApplicationBuilder app)
     {
         var eventBus = app.ApplicationServices.GetRequiredService<IEventBus>();
+        eventBus.Subscribe<OrderStatusChangedToValidatedIntegrationEvent, OrderStatusChangedToValidatedIntegrationEventHandler>();
         eventBus.Subscribe<OrderStatusChangedToStockConfirmedIntegrationEvent, OrderStatusChangedToStockConfirmedIntegrationEventHandler>();
     }
 }
Index: src/Web/WebSPA/Client/angular.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/angular.json b/src/Web/WebSPA/Client/angular.json
--- a/src/Web/WebSPA/Client/angular.json	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/angular.json	(date 1672834130016)
@@ -1,5 +1,8 @@
 {
   "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
+  "cli": {
+    "analytics": false
+  },
   "version": 1,
   "newProjectRoot": "projects",
   "projects": {
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/UserCheckoutAcceptedIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/UserCheckoutAcceptedIntegrationEventHandler.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/UserCheckoutAcceptedIntegrationEventHandler.cs
--- a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/UserCheckoutAcceptedIntegrationEventHandler.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/EventHandling/UserCheckoutAcceptedIntegrationEventHandler.cs	(date 1673046751045)
@@ -37,7 +37,7 @@
                     var createOrderCommand = new CreateOrderCommand(@event.Basket.Items, @event.UserId, @event.UserName, @event.City, @event.Street,
                         @event.State, @event.Country, @event.ZipCode,
                         @event.CardNumber, @event.CardHolderName, @event.CardExpiration,
-                        @event.CardSecurityNumber, @event.CardTypeId);
+                        @event.CardSecurityNumber, @event.CardTypeId, @event.CodeDiscount, @event.Discount, @event.Balance);
 
                     var requestCreateOrder = new IdentifiedCommand<CreateOrderCommand, bool>(createOrderCommand, @event.RequestId);
 
Index: src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.ts b/src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.ts
new file mode 100644
--- /dev/null	(date 1673030762400)
+++ b/src/Web/WebSPA/Client/src/modules/shared/components/points/points.component.ts	(date 1673030762400)
@@ -0,0 +1,47 @@
+import { Component, OnInit } from '@angular/core';
+import {PointsService} from "../../services/points.service";
+import {SecurityService} from "../../services/security.service";
+import {Subscription} from "rxjs";
+
+@Component({
+  selector: 'esh-points',
+  templateUrl: './points.component.html',
+  styleUrls: ['./points.component.scss']
+})
+export class PointsComponent implements OnInit {
+  authenticated: boolean = false;
+  private subscription: Subscription;
+  private userName: string = '';
+  public numberOfPoints: number = 0;
+  public cash:number = 0;
+  private errorMessage: string = '';
+  constructor(private service: SecurityService, private pointService: PointsService) { }
+
+  ngOnInit(): void {
+    this.authenticated = this.service.IsAuthorized;
+    console.log("Enter into eshop: " + this.authenticated);
+    if (this.authenticated) {
+      this.getUserPoints(this.service.UserData.email);
+    }
+  }
+  getUserPoints(userId: string) {
+    this.pointService
+        .getPointsByUser(userId)
+        .subscribe(
+            point => {
+              if (point != null) {
+                this.numberOfPoints = point.numberOfPoints;
+                this.cash = point.cash;
+                console.log("PTS - " + this.numberOfPoints + " " + "money - " + this.cash)
+              }
+            },
+            error => {
+              if (error.status == 404) {
+                this.errorMessage = `${error.error}!`;
+              } else {
+                this.errorMessage = `ERROR: ${error.status} - ${error.statusText}!`;
+              }
+              console.log(error);
+            });
+  }
+}
Index: src/Web/WebSPA/Client/src/modules/shared/models/points.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/models/points.model.ts b/src/Web/WebSPA/Client/src/modules/shared/models/points.model.ts
new file mode 100644
--- /dev/null	(date 1672836425129)
+++ b/src/Web/WebSPA/Client/src/modules/shared/models/points.model.ts	(date 1672836425129)
@@ -0,0 +1,5 @@
+export interface IPoint {
+    userId: string,
+    numberOfPoints: number,
+    cash: number
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Program.cs b/src/Services/Coupon/Coupon.API/Program.cs
--- a/src/Services/Coupon/Coupon.API/Program.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/Program.cs	(date 1672847774442)
@@ -1,9 +1,8 @@
-using System.Net.Mime;
-using System.Reflection;
 using Autofac.Extensions.DependencyInjection;
 using Coupon.API.Extensions;
 using Coupon.API.Infrastructure;
 using Coupon.API.Infrastructure.Repositories;
+using Coupon.API.Infrastructure.Repositories.Point;
 using Microsoft.AspNetCore.Hosting;
 using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.Hosting;
@@ -18,6 +17,7 @@
             CreateHostBuilder(args)
                 .Build()
                 .SeedDatabaseStrategy<CouponContext>(context => new CouponSeed().SeedAsync(context).Wait())
+                .SeedDatabaseStrategy<PointContext>(context => new PointSeed().SeedAsync(context).Wait())
                 .SubscribersIntegrationEvents()
                 .Run();
 
Index: src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673049423642)
+++ b/src/Services/Ordering/Ordering.API/Application/IntegrationEvents/Events/OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent.cs	(date 1673049423642)
@@ -0,0 +1,27 @@
+using Coupon.API.Enums;
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+using Newtonsoft.Json;
+
+namespace Coupon.API.IntegrationEvents.Events;
+
+public sealed record OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent : IntegrationEvent
+{
+    public OrderStatusChangedToAwaitingBalanceUpdateIntegrationEvent(int orderId, string orderStatus, string buyerName, int balance)
+    {
+        OrderId = orderId;
+        OrderStatus = orderStatus;
+        BuyerName = buyerName;
+        Balance = balance;
+    }
+
+    public string UserId { get; set; }
+    public int Balance { get; set; }
+    
+    
+    public int OrderId { get; }
+
+    public string OrderStatus { get; }
+
+    public string BuyerName { get; }
+    
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/CouponSettings.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/CouponSettings.cs b/src/Services/Coupon/Coupon.API/Settings/CouponSettings.cs
rename from src/Services/Coupon/Coupon.API/CouponSettings.cs
rename to src/Services/Coupon/Coupon.API/Settings/CouponSettings.cs
--- a/src/Services/Coupon/Coupon.API/CouponSettings.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Coupon/Coupon.API/Settings/CouponSettings.cs	(date 1672774873276)
@@ -1,10 +1,12 @@
+using Coupon.API.Interfaces;
+
 namespace Coupon.API
 {
     public class CouponSettings
     {
         public string ConnectionString { get; set; }
 
-        public string CouponMongoDatabase { get; set; }
+        public string MongoDatabase { get; set; }
 
         public string EventBusConnection { get; set; }
 
Index: src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToAwaitingBalanceUpdateDomainEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToAwaitingBalanceUpdateDomainEvent.cs b/src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToAwaitingBalanceUpdateDomainEvent.cs
new file mode 100644
--- /dev/null	(date 1673049773544)
+++ b/src/Services/Ordering/Ordering.Domain/Events/OrderStatusChangedToAwaitingBalanceUpdateDomainEvent.cs	(date 1673049773544)
@@ -0,0 +1,14 @@
+namespace Ordering.Domain.Events;
+
+public class OrderStatusChangedToAwaitingBalanceUpdateDomainEvent : INotification
+{
+    public int OrderId { get; }
+
+    public int Balance { get; set; }
+
+    public OrderStatusChangedToAwaitingBalanceUpdateDomainEvent(int orderId, int balance)
+    {
+        OrderId = orderId;
+        Balance = balance;
+    }
+}
\ No newline at end of file
Index: src/Services/Coupon/Coupon.API/IntegrationEvents/Events/BalanceUpdateConfirmedIntegrationEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/BalanceUpdateConfirmedIntegrationEvent.cs b/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/BalanceUpdateConfirmedIntegrationEvent.cs
new file mode 100644
--- /dev/null	(date 1673049098599)
+++ b/src/Services/Coupon/Coupon.API/IntegrationEvents/Events/BalanceUpdateConfirmedIntegrationEvent.cs	(date 1673049098599)
@@ -0,0 +1,9 @@
+using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+
+namespace Coupon.API.IntegrationEvents.Events;
+
+public record BalanceUpdateConfirmedIntegrationEvent(string UserId, int Balance) : IntegrationEvent
+{
+    public string UserId { get; set; } = UserId;
+    public int Balance { get; set; } = Balance;
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderValidated/OrderStatusChangedToValidatedDomainEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderValidated/OrderStatusChangedToValidatedDomainEventHandler.cs b/src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderValidated/OrderStatusChangedToValidatedDomainEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673011893729)
+++ b/src/Services/Ordering/Ordering.API/Application/DomainEventHandlers/OrderValidated/OrderStatusChangedToValidatedDomainEventHandler.cs	(date 1673011893729)
@@ -0,0 +1,47 @@
+namespace Ordering.API.Application.DomainEventHandlers.OrderValidated
+{
+    using Domain.Events;
+    using MediatR;
+    using Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.BuyerAggregate;
+    using Microsoft.eShopOnContainers.Services.Ordering.Domain.AggregatesModel.OrderAggregate;
+    using Microsoft.Extensions.Logging;
+    using Ordering.API.Application.IntegrationEvents;
+    using Ordering.API.Application.IntegrationEvents.Events;
+    using System;
+    using System.Threading;
+    using System.Threading.Tasks;
+
+    public class OrderStatusChangedToValidatedDomainEventHandler
+        : INotificationHandler<OrderStatusChangedToValidatedDomainEvent>
+    {
+        private readonly IOrderRepository _orderRepository;
+        private readonly IBuyerRepository _buyerRepository;
+        private readonly ILoggerFactory _logger;
+        private readonly IOrderingIntegrationEventService _orderingIntegrationEventService;
+
+        public OrderStatusChangedToValidatedDomainEventHandler(
+            IOrderRepository orderRepository,
+            IBuyerRepository buyerRepository,
+            ILoggerFactory logger,
+            IOrderingIntegrationEventService orderingIntegrationEventService)
+        {
+            _orderRepository = orderRepository ?? throw new ArgumentNullException(nameof(orderRepository));
+            _buyerRepository = buyerRepository ?? throw new ArgumentNullException(nameof(buyerRepository));
+            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
+            _orderingIntegrationEventService = orderingIntegrationEventService;
+        }
+
+        public async Task Handle(OrderStatusChangedToValidatedDomainEvent domainEvent, CancellationToken cancellationToken)
+        {
+            _logger.CreateLogger<OrderStatusChangedToValidatedDomainEventHandler>()
+                .LogTrace("Order with Id: {OrderId} has been successfully updated to status {Status} ({Id})",
+                    domainEvent.OrderId, nameof(OrderStatus.Validated), OrderStatus.Validated.Id);
+
+            var order = await _orderRepository.GetAsync(domainEvent.OrderId);
+            var buyer = await _buyerRepository.FindByIdAsync(order.GetBuyerId.Value.ToString());
+
+            var integrationEvent = new OrderStatusChangedToValidatedIntegrationEvent(order.Id, order.OrderStatus.Name, buyer.Name, order.GetTotal());
+            await _orderingIntegrationEventService.AddAndSaveEventAsync(integrationEvent);
+        }
+    }
+}
\ No newline at end of file
Index: src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.html b/src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.html
--- a/src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.html	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/orders/orders-new/orders-new.component.html	(date 1673086001283)
@@ -91,7 +91,11 @@
 
             <div class="d-flex flex-nowrap justify-content-between align-items-center mb-3 mt-3">
                 <div>
-                    <div *ngIf="!coupon">
+                    <div class="form-check form-check-inline u-text-uppercase">
+                        <input class="form-check-input" type="checkbox" id="userPointsId" (change)="keyAgreeUsePoints($event);">
+                        <label class="form-check-label u-text-uppercase" for="userPointsId">Have points? Use it!</label>
+                    </div>
+                    <div *ngIf="!checkedPoints">
                         <div class="u-text-uppercase">Have a discount code?</div>
                         <div class="d-flex flex-nowrap justify-content-between align-items-center mt-1">
                             <input
@@ -113,12 +117,16 @@
                     <div>
                         <div class="text-right ml-3" *ngIf="coupon?.discount">-${{coupon?.discount | number:'.2-2'}}</div>
                     </div>
+                    <div>
+                        <div class="text-right ml-3" *ngIf="checkedPoints">-${{discount | number:'.2-2'}}</div>
+                    </div>
                 </div>
             </div>
 
             <div class="divider d-flex align-items-center justify-content-end mb-4 pt-4 text-uppercase u-text-xl">
                 <div>Total</div>
-                <div class="ml-3">${{ (coupon?.discount ? ((order.total - coupon?.discount) < 0 ? 0 : (order.total - coupon?.discount)) : order.total) | number:'.2-2'}}</div>
+                <div *ngIf="!checkedPoints" class="ml-3">${{ (coupon?.discount ? ((order.total - coupon?.discount) < 0 ? 0 : (order.total - coupon?.discount)) : order.total) | number:'.2-2'}}</div>
+                <div *ngIf="checkedPoints" class="ml-3">${{ (discount ? ((order.total - discount) < 0 ? 0 : (order.total - discount)) : order.total) | number:'.2-2'}}</div>
             </div>
 
             <div class="esh-orders_new-buttons d-flex justify-content-end align-items-center">
Index: src/Services/Ordering/Ordering.UnitTests/Builders.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.UnitTests/Builders.cs b/src/Services/Ordering/Ordering.UnitTests/Builders.cs
--- a/src/Services/Ordering/Ordering.UnitTests/Builders.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.UnitTests/Builders.cs	(date 1673048133149)
@@ -24,7 +24,10 @@
             cardNumber: "12",
             cardSecurityNumber: "123",
             cardHolderName: "name",
-            cardExpiration: DateTime.UtcNow);
+            cardExpiration: DateTime.UtcNow,
+            "DISC-10",
+            10,
+            200);
     }
 
     public OrderBuilder AddOne(
Index: src/Services/Payment/Payment.API/IntegrationEvents/EventHandling/OrderStatusChangedToValidatedIntegrationEventHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Payment/Payment.API/IntegrationEvents/EventHandling/OrderStatusChangedToValidatedIntegrationEventHandler.cs b/src/Services/Payment/Payment.API/IntegrationEvents/EventHandling/OrderStatusChangedToValidatedIntegrationEventHandler.cs
new file mode 100644
--- /dev/null	(date 1673012798557)
+++ b/src/Services/Payment/Payment.API/IntegrationEvents/EventHandling/OrderStatusChangedToValidatedIntegrationEventHandler.cs	(date 1673012798557)
@@ -0,0 +1,65 @@
+namespace Payment.API.IntegrationEvents.EventHandling
+{
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Abstractions;
+    using Microsoft.eShopOnContainers.BuildingBlocks.EventBus.Events;
+    using Microsoft.Extensions.Logging;
+    using Microsoft.Extensions.Options;
+    using Payment.API.IntegrationEvents.Events;
+    using Serilog.Context;
+    using System.Threading.Tasks;
+
+    public class OrderStatusChangedToValidatedIntegrationEventHandler :
+        IIntegrationEventHandler<OrderStatusChangedToValidatedIntegrationEvent>
+    {
+        private readonly IEventBus _eventBus;
+        private readonly PaymentSettings _settings;
+        private readonly ILogger<OrderStatusChangedToValidatedIntegrationEventHandler> _logger;
+
+        public OrderStatusChangedToValidatedIntegrationEventHandler(
+            IEventBus eventBus,
+            IOptionsSnapshot<PaymentSettings> settings,
+            ILogger<OrderStatusChangedToValidatedIntegrationEventHandler> logger)
+        {
+            _eventBus = eventBus;
+            _settings = settings.Value;
+            _logger = logger ?? throw new System.ArgumentNullException(nameof(logger));
+
+            _logger.LogTrace("PaymentSettings: {@PaymentSettings}", _settings);
+        }
+
+        public async Task Handle(OrderStatusChangedToValidatedIntegrationEvent @event)
+        {
+            using (LogContext.PushProperty("IntegrationEventContext", $"{@event.Id}-{Program.AppName}"))
+            {
+                _logger.LogInformation("----- Handling integration event: {IntegrationEventId} at {AppName} - ({@IntegrationEvent})", @event.Id, Program.AppName, @event);
+
+                IntegrationEvent orderPaymentIntegrationEvent;
+
+                //Business feature comment:
+                // When OrderStatusChangedToValidated Integration Event is handled.
+                // Here we're simulating that we'd be performing the payment against any payment gateway
+                // Instead of a real payment we just take the PaymentLimitToSucceed to simulate payment approval
+                // The payment can be successful or it can fail
+
+                await Task.Delay(3000); // Checking with the bank 😉
+
+                if (_settings.PaymentSucceeded && (!_settings.MaxOrderTotal.HasValue || @event.Total < _settings.MaxOrderTotal ))
+                {
+                    orderPaymentIntegrationEvent = new OrderPaymentSucceededIntegrationEvent(@event.OrderId);
+                }
+                else
+                {
+                    _logger.LogWarning("----- Payment for ${Total} rejected for order {OrderId} because of service configuration", @event.Total, @event.OrderId);
+
+                    orderPaymentIntegrationEvent = new OrderPaymentFailedIntegrationEvent(@event.OrderId);
+                }
+
+                _logger.LogInformation("----- Publishing integration event: {IntegrationEventId} from {AppName} - ({@IntegrationEvent})", orderPaymentIntegrationEvent.Id, Program.AppName, orderPaymentIntegrationEvent);
+
+                _eventBus.Publish(orderPaymentIntegrationEvent);
+
+                await Task.CompletedTask;
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/Services/Payment/Payment.API/PaymentSettings.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Payment/Payment.API/PaymentSettings.cs b/src/Services/Payment/Payment.API/PaymentSettings.cs
--- a/src/Services/Payment/Payment.API/PaymentSettings.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Payment/Payment.API/PaymentSettings.cs	(date 1673012894861)
@@ -4,5 +4,6 @@
 {
     public bool PaymentSucceeded { get; set; }
     public string EventBusConnection { get; set; }
+    public decimal? MaxOrderTotal { get; set; }
 }
 
Index: src/Web/WebSPA/Client/src/modules/shared/models/order.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Web/WebSPA/Client/src/modules/shared/models/order.model.ts b/src/Web/WebSPA/Client/src/modules/shared/models/order.model.ts
--- a/src/Web/WebSPA/Client/src/modules/shared/models/order.model.ts	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Web/WebSPA/Client/src/modules/shared/models/order.model.ts	(date 1673043872699)
@@ -17,6 +17,7 @@
     subtotal: number,
     coupon: string;
     discount: number;
+    balance:number;
     total: number;
     orderItems: IOrderItem[];
 }
Index: src/Services/Coupon/Coupon.API/Settings/Interfaces/ISettings.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Coupon/Coupon.API/Settings/Interfaces/ISettings.cs b/src/Services/Coupon/Coupon.API/Settings/Interfaces/ISettings.cs
new file mode 100644
--- /dev/null	(date 1672770219817)
+++ b/src/Services/Coupon/Coupon.API/Settings/Interfaces/ISettings.cs	(date 1672770219817)
@@ -0,0 +1,14 @@
+namespace Coupon.API.Interfaces;
+
+public interface ISettings
+{
+    string ConnectionString { get; set; }
+
+    string MongoDatabase { get; set; }
+
+    string EventBusConnection { get; set; }
+
+    bool UseCustomizationData { get; set; }
+
+    bool AzureStorageEnabled { get; set; }
+}
\ No newline at end of file
Index: src/Services/Ordering/Ordering.UnitTests/Domain/OrderAggregateTest.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/Ordering/Ordering.UnitTests/Domain/OrderAggregateTest.cs b/src/Services/Ordering/Ordering.UnitTests/Domain/OrderAggregateTest.cs
--- a/src/Services/Ordering/Ordering.UnitTests/Domain/OrderAggregateTest.cs	(revision a96b7b965f0abbc7f343837f857612a731c915ce)
+++ b/src/Services/Ordering/Ordering.UnitTests/Domain/OrderAggregateTest.cs	(date 1673048133182)
@@ -116,10 +116,13 @@
         var cardSecurityNumber = "123";
         var cardHolderName = "FakeName";
         var cardExpiration = DateTime.Now.AddYears(1);
+        var discountCode = "DISC-10";
+        var discount = 10;
+        var balance = 200;
         var expectedResult = 1;
 
         //Act 
-        var fakeOrder = new Order("1", "fakeName", new Address(street, city, state, country, zipcode), cardTypeId, cardNumber, cardSecurityNumber, cardHolderName, cardExpiration);
+        var fakeOrder = new Order("1", "fakeName", new Address(street, city, state, country, zipcode), cardTypeId, cardNumber, cardSecurityNumber, cardHolderName, cardExpiration, discountCode, discount, balance);
 
         //Assert
         Assert.Equal(fakeOrder.DomainEvents.Count, expectedResult);
@@ -139,10 +142,13 @@
         var cardSecurityNumber = "123";
         var cardHolderName = "FakeName";
         var cardExpiration = DateTime.Now.AddYears(1);
+        var discountCode = "DISC-10";
+        var discount = 10;
+        var balance = 200;
         var expectedResult = 2;
 
         //Act 
-        var fakeOrder = new Order("1", "fakeName", new Address(street, city, state, country, zipcode), cardTypeId, cardNumber, cardSecurityNumber, cardHolderName, cardExpiration);
+        var fakeOrder = new Order("1", "fakeName", new Address(street, city, state, country, zipcode), cardTypeId, cardNumber, cardSecurityNumber, cardHolderName, cardExpiration, discountCode, discount, balance);
         fakeOrder.AddDomainEvent(new OrderStartedDomainEvent(fakeOrder, "fakeName", "1", cardTypeId, cardNumber, cardSecurityNumber, cardHolderName, cardExpiration));
         //Assert
         Assert.Equal(fakeOrder.DomainEvents.Count, expectedResult);
@@ -162,7 +168,10 @@
         var cardSecurityNumber = "123";
         var cardHolderName = "FakeName";
         var cardExpiration = DateTime.Now.AddYears(1);
-        var fakeOrder = new Order("1", "fakeName", new Address(street, city, state, country, zipcode), cardTypeId, cardNumber, cardSecurityNumber, cardHolderName, cardExpiration);
+        var discountCode = "DISC-10";
+        var discount = 10;
+        var balance = 200;
+        var fakeOrder = new Order("1", "fakeName", new Address(street, city, state, country, zipcode), cardTypeId, cardNumber, cardSecurityNumber, cardHolderName, cardExpiration, discountCode, discount, balance);
         var @fakeEvent = new OrderStartedDomainEvent(fakeOrder, "1", "fakeName", cardTypeId, cardNumber, cardSecurityNumber, cardHolderName, cardExpiration);
         var expectedResult = 1;
 
